//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Granblue Fantasy: Relink Data Index (data.i)
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Base steam release - useful offsets:
// .i reader = 0x1401ABD50
// hash finder = 0x1406F8380
// xxhash = 0x14069AC40
// decompression: 0x143666F40

struct
{
    int FieldsTableOffset <format=hex>;
    byte Empty[6];
    short OffsetTableSize <comment="Relative to here">;
    
    short UnknownOffset;
    short CodeNameFieldOffset <format=hex>;
    short ChunkSizeFieldOffset <format=hex>;
    short XXHashSeedFieldOffset <format=hex>;
    short SecondHashTableFieldOffset <format=hex>;
    short HashToFileEntryTableFieldOffset <format=hex>;
    short FileEntriesTableFieldOffset <format=hex>;
    short FirstHashTableFieldOffset <format=hex>;
    short Table2FieldOffset <format=hex>;
    short Table1FieldOffset <format=hex>;
    
    // [3] is offset to custom seed (int64) for xxhash?
} FieldDefinitionHeader <size=0x20, bgcolor=cRed>;

FSeek(FieldDefinitionHeader.FieldsTableOffset);
int OffsetTableOffsetToBehind <format=hex, fgcolor=cPurple>;

local int basePos = FTell();

struct
{
    FSeek(FieldDefinitionHeader.FieldsTableOffset + FieldDefinitionHeader.Table1FieldOffset);
    int TableOffset <format=hex, fgcolor=cRed>;
    
    FSeek(startof(TableOffset) + TableOffset);
    struct
    {
        int Table1Count;
        int Entries[Table1Count];
    } Table1 <bgcolor=cGreen>; // Num chunks maybe?
} Table1Field;

struct
{
    FSeek(FieldDefinitionHeader.FieldsTableOffset + FieldDefinitionHeader.Table2FieldOffset);
    int TableOffset <format=hex, fgcolor=cRed>;
    
    FSeek(startof(TableOffset) + TableOffset);
    struct
    {
        int TableCount;
        uint64 DataOffsets[TableCount] <format=hex>;
    } TableUnk <bgcolor=cBlue>;
} Table2Field;

struct
{
    FSeek(FieldDefinitionHeader.FieldsTableOffset + FieldDefinitionHeader.FirstHashTableFieldOffset);
    int TableOffset <format=hex, fgcolor=cRed>;
    
    FSeek(startof(TableOffset) + TableOffset);
    
    struct
    {
        int HashCount;
        uint64 OrderedXXHash_Hashes[HashCount] <format=hex, comment="xxHash">; // Example: system/table/saveinfo.tbl
    } FileHashTable <bgcolor=cYellow>;
} FirstHashTableField <comment="This table is checked first - boot table?">;

struct
{
    FSeek(FieldDefinitionHeader.FieldsTableOffset + FieldDefinitionHeader.FileEntriesTableFieldOffset);
    int TableOffset <format=hex, fgcolor=cRed>;
    
    FSeek(startof(TableOffset) + TableOffset);
    struct
    {
         uint32 fileCount;
         struct 
         {
            uint64 Offset <format=hex>;
            uint32 Size <format=hex>;
            uint32 CompressedSize <format=hex>; // Should be fastlz?
            uint32 header;
            byte unk0;
            byte unk1;
            byte DataFileNumber <comment="Must not be 2? has an hardcoded check">;
            byte unk2;
    
        } FileEntries[fileCount];
    } FileEntriesTable <optimize=false>;
} FileEntriesTableField <bgcolor=cDkYellow>;

struct
{
    FSeek(FieldDefinitionHeader.FieldsTableOffset + FieldDefinitionHeader.HashToFileEntryTableFieldOffset);
    int TableOffset <format=hex, fgcolor=cRed>;
    
    FSeek(startof(TableOffset) + TableOffset);
    
    struct
    {
         int EntriesCount;
         struct
         {
             int FileEntryIndex;
             int FileEntryIndex2;
             int FileEntryIndex3;
         } FileIndex[EntriesCount];
    } HashToFileEntryTable <bgcolor=cGray, optimize=false>;
} HashToFileEntryTableField;

struct
{
    FSeek(FieldDefinitionHeader.FieldsTableOffset + FieldDefinitionHeader.SecondHashTableFieldOffset);
    int TableOffset <format=hex, fgcolor=cRed>;
    
    FSeek(startof(TableOffset) + TableOffset);
    
    struct
    {
         int HashCount;
         uint64 OrderedXXHash_Hashes[HashCount] <format=hex, comment="xxHash">; // Example: system/table/saveinfo.tbl
    } HashTable2 <bgcolor=cDkBlue, optimize=false>; // This is the main file table, IIRC
} SecondHashTableField <comment="This table is checked after the first one if file wasn't found">;

if (FieldDefinitionHeader.CodeNameFieldOffset > 0)
{
    struct
    {
        FSeek(FieldDefinitionHeader.FieldsTableOffset + FieldDefinitionHeader.CodeNameFieldOffset);
        int CodeNameOffset <format=hex>;
        
        FSeek(startof(CodeNameOffset) + CodeNameOffset);
        uint CodeNameLength;
        char CodeName[CodeNameLength];
    } CodeNameField;
}
