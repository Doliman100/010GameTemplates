//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Playground MiniZip (PGZP)
//   Authors: Nenkai
//   Version: 100 and 101 (supports FH3 (100) <-> FH5 (101))
//   Purpose: 
//  Category: 
// File Mask: .minizip
//  ID Bytes: 50 47 5A 50
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

typedef enum <short>
{
    Deflate = 8,
    Deflate_TFIT = 22,
} CompressionType;

typedef struct
{
    int m_dwDataOffset <format=hex>;
    int m_dwSize <format=hex>;
    
    if (Header.Version >= 101)
    {
        CompressionType m_wCompressionMethod : 12;
        byte Padding : 4;
    }
    else
    {
        CompressionType m_wCompressionMethod : 14;
        byte Padding : 2;
    }
    
    short ParentFolderIndex;
} File <optimize=false>;

typedef struct
{
    int64 StartDataOffset <format=hex>;
} Folder;

struct
{
    struct
    {
        char Magic[4] <comment="Doesn't seem to be checked, maybe on FH5 though">;
        int Version <comment="Probably unchecked">;
        int InfoOffset <format=hex, fgcolor=cRed>;
        int NumDirEntries;
        int nFolders;
        int FilesPerChunk;
        int NumChunks;
        int Unread;
    } Header <bgcolor=cPurple>;
    
    FSeek(Header.InfoOffset);
    
    local int folderSize = sizeof(int) * Header.nFolders + 4;
    if ( ((sizeof(int) * Header.nFolders + 4) % 8) != 0 )
        folderSize = sizeof(int) * Header.nFolders + 8;
    
    int FolderIndices[folderSize / 4] <bgcolor=cGreen, comment="Presumably unused">;
    
    local int numChunks = Header.NumDirEntries / Header.FilesPerChunk;
    if (Header.NumDirEntries % Header.FilesPerChunk > 0)
        numChunks++;
        
    local int i = 0;
    local int left = Header.NumDirEntries;
    local int filesThisChunk = 0;
    for (i = 0; i < numChunks; i++)
    {
        filesThisChunk = Min(left, Header.FilesPerChunk);
        
        struct
        {
            uint64 StartDataOffset <format=hex>;
            File files[filesThisChunk];
            
            left -= filesThisChunk;
        
            if (left == 0)
                File end;
        } Chunk;
    }
} PlaygroundMiniZip;