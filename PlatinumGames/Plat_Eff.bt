//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: PlatinumGames Eff/Est 
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Based on Vanquish debug syms, may have been updated/outdated
struct Hw_cVec3
{
    float x;
    float y;
    float z;
};

struct cF32Decrease
{
  float m_value;
};

struct EspColor
{
  float r;
  float g;
  float b;
  float a;
};

struct EstSizeAnm_Normal
{
  float add_w;
  float add_h;
  cF32Decrease mul_w;
  cF32Decrease mul_h;
  float add_wh;
  cF32Decrease mul_wh;
  uint32 _pad[8];
};

struct EstSizeAnm_Key
{
  float keyFrame[5];
  float value[5];
  ushort maxFrame;
  ubyte rndFrame;
  ubyte _pad0;
  uint32 flag;
  uint32 _pad1;
  uint32 _pad2;
};

union CmnParam__size_anm_union
{
  EstSizeAnm_Normal normal;
  EstSizeAnm_Key key;
};

struct EstColAnm_Normal
{
  cF32Decrease d_r;
  cF32Decrease d_g;
  cF32Decrease d_b;
  cF32Decrease d_a;
  cF32Decrease d_ra;
  uint32 _pad[18];
};

struct EstColAnm_Key
{
  float keyFrame[4];
  EspColor value[4];
  ushort maxFrame;
  ubyte rndFrame;
  ubyte _pad0;
  uint flag;
  float cntFinalAdd;
};

union CmnParam__col_anm_union
{
  EstColAnm_Normal normal;
  EstColAnm_Key key;
};


struct EspCmnBlock
{
  uint16 espId;
  uint16 life;
  uint32 flag[2];
  ubyte parentNo;
  ubyte partsNo;
  short releaseTime;
  ubyte callId;
  ubyte randFix;
  byte priority;
  ubyte fogType;
  uint32 eventObjId;
  ubyte vanishAlphaAngle;
  ubyte AttenuationAlphaAngle;
  ushort __dummy;
  uint _dummy[9];
};

struct CmnParam
{
  uint32 flag[1];
  Hw_cVec3 pos;
  Hw_cVec3 r_pos;
  Hw_cVec3 spd;
  Hw_cVec3 r_spd;
  cF32Decrease d_spd;
  Hw_cVec3 acc;
  Hw_cVec3 rot;
  Hw_cVec3 r_rot;
  Hw_cVec3 rotSpd;
  Hw_cVec3 r_rotSpd;
  cF32Decrease rot_d_spd;
  byte size_anm_type;
  byte col_anm_type;
  short _size_sinanm_offset;
  short _pos_sinanm_offset;
  short _rot_sinanm_offset;
  float size_h;
  float size_w;
  float r_size_h;
  float r_size_w;
  CmnParam__size_anm_union size_anm;
  EspColor col;
  EspColor r_col;
  short colStartFrame;
  short colMaxFrame;
  CmnParam__col_anm_union col_anm;
  ushort _vecOffset;
  ushort _wkOffset;
  float wind_pow;
  ubyte _pad00;
  ubyte r_pos_type;
  ubyte vanish_start_time;
  ubyte vanish_delete_time;
  Hw_cVec3 gravity;
  float size_wh;
  float r_size_wh;
  uint wind_type;
  float min_spd;
  uint _dummy[3];
};

struct EmtCmnBlock
{
  ubyte num;
  ubyte interval;
  ubyte emtId;
  ubyte interval_mul;
  ushort startFrame;
  ushort endFrame;
  byte a_num;
  byte r_num;
  byte a_interval;
  ubyte r_interval;
  ubyte div_num;
  byte setPriority;
  byte lodType;
  ubyte _pad02;
  float lodDistOfs;
  uint32 _dummy[5];
};

struct sEstTableHeader
{
  EspCmnBlock cmn;
  CmnParam cp;
  EmtCmnBlock emt_cmn_block;
  uint16 _pad;
  uint16 _emtOffset;
  float timeRate;
  uint16 texId;
  uint16 maskTexId;
  float posOfsset;
  float alphaNear;
  float alphaFar;
  float texCx;
  float texCy;
  int16 anmSpd;
  ubyte anmStart;
  ubyte anmEnd;
  uint32 anmFlag;
  ubyte anmRnd;
  ubyte blendType;
  ubyte maskPtnNo;
  ubyte anmStartFrame;
  float simRate;
  int16 prim_type;
  ubyte shd_type;
  ubyte shd_type_sub;
  EspColor shd_col0;
  EspColor shd_col1;
  byte shd_param;
  ubyte anmSpdRnd;
  uint16 dmy_pad1;
  float softPtRate;
  uint32 _dummy[21];
};

struct
{
    struct sEstHeader
    {
      char name[4];
      uint32 nTbl <fgcolor=cGreen>;
      
      // starting from here are guesses, not from debug symbols
      uint tblOfs <format=hex, fgcolor=cRed>;
      uint unkOffset2 <format=hex, fgcolor=cRed>;
      uint tblDataOfs <format=hex, fgcolor=cRed>;
      uint Unk4;
      uint Unk5;
      uint _pad;
    } EstHeader;
    
    struct
    {
      int TableOffsets[EstHeader.nTbl] <format=hex>;
      local int i = 0;
      for (i = 0; i < EstHeader.nTbl; i++)
      {
        FSeek(TableOffsets[i]);
        sEstTableHeader tableHdr;
      }
    } TableHeaders;

} espEmtEst;