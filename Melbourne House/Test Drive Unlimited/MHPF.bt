//------------------------------------------------
//--- 010 Editor v9.0 Binary Template
//
//      File: MHPF
//   Authors: Nenkai#9075
//   Version: 1.0
//   Purpose: Test Drive Unlimited PSP/PS2 Melbourne House Packed File
//  Category: 
// File Mask: *.pck
//  ID Bytes: 4D 48 50 46 // MHPF
//   History: 
//------------------------------------------------

typedef struct
{
     string Name;
 } FileName;

string PrintName(FileName& name)
{
    local uint hash = GetHash(name.Name, MelbourneHousePackedFile.header.HashPrime);
    local string str;
    SPrintf(str, "%s (Hash: %08X)", name.Name, hash);

    return str;
}

struct MHPF
{
    struct Header
    {
        char Magic[4] <comment="Has Little or big endian MHPF check, and also a specific endian check for platform">;
        short Version1 <comment="Must match">;
        short Version2 <comment="Must match">;
        int TotalSize <format=hex, comment="Must match with physical size">;
        int NumFiles <fgcolor=cGreen>;
        int HashPrime <fgcolor=cWhite>;
        int FileTocLocation <format=hex, fgcolor=cRed>;
        int FileTocSize <format=hex, fgcolor=cYellow>;
        int FileDataLocation <format=hex, fgcolor=cRed>;
        int FileDataSize <format=hex, fgcolor=cYellow>;
        int FileNameOffsetsLocation <format=hex, fgcolor=cRed>;
        int FileNameOffsetsSize <format=hex, fgcolor=cYellow>;
        int FileNamesLocation <format=hex, fgcolor=cRed>;
        int FileNamesSize <format=hex, fgcolor=cYellow>;
    } header <size=0x34, bgcolor=cPurple>;

    FSeek(header.FileTocLocation);
    struct
    {
        int Hash <format=hex, comment="See 'GetHash' in template">;
        int FileOffset <format=hex, fgcolor=cDkRed>;
        int FileSize <format=hex, fgcolor=cDkYellow>;
    } FileInfos[header.NumFiles] <comment="Must be ordered by hash, for game bsearch">;

    FSeek(header.FileNameOffsetsLocation);
    int StringOffsets[header.NumFiles] <format=hex, bgcolor=cRed, comment="Relative to Strings Position">;

    FSeek(header.FileNamesLocation);
    struct
    {
        FileName fileName[header.NumFiles] <optimize=false, comment=PrintName>;
        
    } FileNames <bgcolor=cGray, comment="Ordered by hash">;

} MelbourneHousePackedFile;

uint GetHash(string fileName, uint seed)
{
    local uint hash = 0;
    local byte nextSeperator = true;

    local int i;
    local char c;
    for (i = 0; i < Strlen(fileName); i++)
    {
        c = fileName[i];
        if (c == '/' || c == '\\')
        {
            if (!nextSeperator)
            {
                c = '/';
            }
        }
        
        nextSeperator = c == '/';
        hash = (hash * seed) + ToLower(c);
    }

    return hash;
}
