//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: CarScene (Forza .carbin)
//   Authors: Nenkai
//   Version: 1.2 (Supports FH3/4/5)
//   Purpose: Master scene file definition for models
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

typedef struct
{
    int StrLen;
    if (StrLen > 0)
        char Str[StrLen];
} String4 <comment=Str, optimize=false>;

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vec4;

typedef struct
{
    Vec4 Min;
    Vec4 Max;
} Bounds; 

typedef struct
{
    float M11;
    float M12;
    float M13;
    float M14;
    
    float M21;
    float M22;
    float M23;
    float M24;
    
    float M31;
    float M32;
    float M33;
    float M34;
    
    float M41;
    float M42;
    float M43;
    float M44;
} Matrix4x4;

typedef struct
{
    ushort CarRenderModel11Version <comment="FH3/FH4: 16, FH5: 18">;
    String4 Path;
    Matrix4x4 Matrix;
    
    if (CarRenderModel11Version < 5)
        uint LODBits;
    else
        ushort LODBits;   
    
    String4 Name;
    short Unk;
    byte unk;
    
    int Unk; // 5 bits?
    
    if (CarRenderModel11Version < 9)
        String4 Unk; // was removed later on
    
    if (CarRenderModel11Version >= 2)
    {
        uint ContainerCountV2;
        if (ContainerCountV2 > 0)
        {
            struct
            {
                String4 Name;
                int BundleSizeMaybe;
                byte BundleMaybe[BundleSizeMaybe];
            } ContainerV2[ContainerCountV2] <optimize=false>;
        }
    }
    
    if (CarRenderModel11Version >= 3)
    {
        uint ContainerCountV3;   
        struct
        {
            String4 Name;
            int Unk;
        } ContainerV3[ContainerCountV3] <optimize=false>;
    }
    
    if (CarRenderModel11Version >= 6)
    {
        byte Droppable;
        
        if (Droppable)
        {
            float DropValue;
            uint DropPartID;
        }
    }
    
    if (CarRenderModel11Version >= 8)
        float BreakAmount;   

    if (CarRenderModel11Version >= 9)
    {
        uint AOMapInfoCount;
        struct
        {
            ushort AOMapInfoVersion <comment="FH3/FH4: 3">;
            String4 Path;
            int Unk;
            int Unk2;
            
            if (AOMapInfoVersion == 1)
            {
                short UnkV1;
                byte UnkV1;
            }
            else if (AOMapInfoVersion >= 2)
            {
                GUID guid;
            }
            
            byte Unk;
            
            if (AOMapInfoVersion >= 3)
            {
                signed byte unk;
                signed byte unk;
            }
        } AOMapInfo[AOMapInfoCount] <optimize=false>; // CarScene::ICarRenderModel::AOMapInfo
    }
    
    if (CarRenderModel11Version >= 10)
        byte IsInteriorWindshield;
    
    if (CarRenderModel11Version >= 11)
    {
        byte UnkV11_1;
        byte UnkV11_2;
        uint UnkV11_3;
        uint UnkV11_4;
        uint UnkV11_5;
        uint UnkV11_6;
    }
    
    if (CarRenderModel11Version >= 12)
        String4 UnkV12;
    
    if (CarRenderModel11Version >= 13)
        GUID GuidV13;
    
    if (CarRenderModel11Version >= 14)
    {
        GUID GuidV14;
        uint UnkV14;
    }
    
    if (CarRenderModel11Version >= 15)
        uint UnkV15;
    
    if (CarRenderModel11Version >= 16)
    {
        uint UnkCountV16;
        if (UnkCountV16 > 0)
        {
            struct
            {
                GUID UnkGuidV16;
            } UnkGUIDs[UnkCountV16];
        }
    }
    
    if (CarRenderModel11Version >= 17) // FH5
        ubyte UnkV17;
        
    if (CarRenderModel11Version >= 18) // FH5
        uint UnkV18;
} CarRenderModel11 <comment=PrintCarRenderModel11>;

string PrintCarRenderModel11(CarRenderModel11& model)
{
    return model.Path.Str;   
}

typedef enum <uint>
{
    // Type                             DB Table
    CarPartEngine = 0,               // List_UpgradeEngine
    CarPartDrivetrain = 1,           // List_UpgradeDrivetrain
    CarPartCarBody = 2,              // List_UpgradeCarBody
    CarPartMotor = 3,                // List_UpgradeMotor
    CarPartBrakes = 4,               // List_UpgradeBrakes
    CarPartSpringDamper = 5,         // List_UpgradeSpringDamper
    CarPartAntiSwayFront = 6,        // List_UpgradeAntiSwayFront
    CarPartAntiSwayRear = 7,         // List_UpgradeAntiSwayRear
    CarPartTireCompound = 8,         // List_UpgradeTireCompound
    CarPartRearWing = 9,             // List_UpgradeRearWing
    CarPartRimSizeFront = 10,        // List_UpgradeRimSizeFront
    CarPartRimSizeRear = 11,         // List_UpgradeRimSizeRear
    CarPartCamshaft = 12,            // List_UpgradeEngineCamshaft
    CarPartValves = 13,              // List_UpgradeEngineValves
    CarPartDisplacement = 14,        // List_UpgradeEngineDisplacement
    CarPartPistonsCompression = 15,  // List_UpgradeEnginePistonsCompression
    CarPartFuelSystem = 16,          // List_UpgradeEngineFuelSystem
    CarPartIgnition = 17,            // List_UpgradeEngineIgnition
    CarPartExhaust = 18,             // List_UpgradeEngineExhaust
    CarPartIntake = 19,              // List_UpgradeEngineIntake
    CarPartFlywheel = 20,            // List_UpgradeEngineFlywheel
    CarPartManifold = 21,            // List_UpgradeEngineManifold
    CarPartRestrictorPlate = 22,     // List_UpgradeEngineRestrictorPlate
    CarPartOilCooling = 23,          // List_UpgradeEngineOilCooling
    CarPartSingleTurbo = 24,         // List_UpgradeEngineTurboSingle
    CarPartTwinTurbo = 25,           // List_UpgradeEngineTurboTwin
    CarPartQuadTurbo = 26,           // List_UpgradeEngineTurboQuad
    CarPartSuperchargerCSC = 27,     // List_UpgradeEngineCSC
    CarPartSuperchargerDSC = 28,     // List_UpgradeEngineDSC
    CarPartIntercooler = 29,         // List_UpgradeEngineIntercooler
    CarPartClutch = 30,              // List_UpgradeDrivetrainClutch
    CarPartTransmission = 31,        // List_UpgradeDrivetrainTransmission
    CarPartDriveline = 32,           // List_UpgradeDrivetrainDriveline
    CarPartDifferential = 33,        // List_UpgradeDrivetrainDifferential
    CarPartFrontBumper = 34,         // List_UpgradeCarBodyFrontBumper
    CarPartRearBumper = 35,          // List_UpgradeCarBodyRearBumper
    CarPartHood = 36,                // List_UpgradeCarBodyHood
    CarPartSideSkirts = 37,          // List_UpgradeCarBodySideSkirt
    CarPartTireWidthFront = 38,      // List_UpgradeCarBodyTireWidthFront
    CarPartTireWidthRear = 39,       // List_UpgradeCarBodyTireWidthRear
    CarPartWeightReduction = 40,     // List_UpgradeCarBodyWeight
    CarPartChassisStiffness = 41,    // List_UpgradeCarBodyChassisStiffness
    CarPartMotorParts = 42,          // List_UpgradeMotorParts
    // #define NUM_PARTS_TOTAL = 42
    
    // Aside
    CarPartWheelStyle = 43,
    CarPartAspiration = 44,
    
    
} PartType;

typedef struct
{
    PartType Type : 8;
    ushort CarPartVersion <comment="FH3/FH4: 2">;
    PartType Type2 : 32;
    uint ModelCount;
    CarRenderModel11 Models[ModelCount] <optimize=false>;
    
    if (CarPartVersion >= 2)
        Bounds BoundsV2;
        
} Part <comment=PartToString, optimize=false>;

string PartToString(Part& part)
{
    return EnumToString(part.Type);   
}
    
struct
{
    ushort Version <comment="FH3/FH4 = 5, FH5: 6">;
    
    if (Version >= 3)
        GUID GuidV3;
        
    if (Version >= 5)
        byte UnkV5;
    uint Unk;
    
    String4 ModelName;
    String4 ModelBundlePath;
    
    if (Version >= 2)
        short VisibleLODBitsV2 <format=hex>;
        
    if (Version < 4)
    {
        uint PartCount;
        struct
        {
            String4 Path;
        } PartOld[PartCount];
    }
    else
    {
        uint NonUpgradablePartCount;
        Part NonUpgradableParts[NonUpgradablePartCount];
    }
    
    uint UpgradablePartCount; // Count for something?
    if (UpgradablePartCount)
    {
        struct
        {
            ushort UpgradablePartsVersion <comment="FH3/FH4/FH5: 3">;
            PartType Type;
            uint UpgradeCount;
            
            struct
            {
                ushort UpgradeVersion <comment="FH3/FH4/FH5: 3">;
                byte Unk;
                byte Unk2;
                uint ID;
                int Unk4;
                byte Unk5;
                
                if (UpgradeVersion < 3)
                {
                    uint ModelCount;
                    CarRenderModel11 Models[ModelCount];
                }
                
                if (UpgradeVersion >= 2)
                    Bounds BoundsV2;
                    
            } Upgrade[UpgradeCount] <optimize=false>; // CarScene::UpgradablePart::Upgrade
            
            if (UpgradablePartsVersion >= 3)
            {
                uint ModelCount;
                struct
                {
                    uint IDCount;
                    uint IDs[IDCount];
                    CarRenderModel11 Model;
                } UnkModelEntry[ModelCount] <optimize=false>;
                
            }
        } UpgradableParts[UpgradablePartCount] <optimize=false>;
    }

    if (Version >= 6) // FH5
        byte UnkV6;
} CarScene;

if (FTell() == FileSize())
    Printf("OK: CarScene file fully parsed!");
else
    Printf("Warning: CarScene file was not fully parsed");
