//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: World of Goo Wiiware Data Package (00000002.app) - master.pak
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Note1: may not stricly be used for just master.pak

// Note2: Executable has embedded paks:
// * WoG USA Release 
//   - Lookup pak header: 0x802823E0 of executable (0x27E4E0 physical address)
//   - Core resources pak: 0x80289020 (0x285120 physical address)
// * WoG USA Demo 
//   - Lookup pak header: 0x80277840 of executable (0x273940 physical address)
//   - Core resources pak: 0x8027CA00 (0x278B00 physical address)

// Note4: Searching for hash is just done through top to bottom, no binary searching - also other paks may be used
// Note5: If there is any compression, it'll most likely be LZ as random chunks of text can be seen throughout (wii compression?)
// Note6: Compression is maybe handled outside file system code.

// PPC is Big Endian
BigEndian();

// Lookup/Toc without data for pak file within executable (00000001.app)
// May be used as fallback lookup table if missing from pak?
const uint DOL_Toc1_Offset = 0x27E4E0; 

// Fallback toc (with data) for core files (properties folder?) within executable (00000001.app)
const uint DOL_Toc2_Offset = 0x285120; // Some XMLs

//FSeek(DOL_Toc2_Offset);

local int BaseFilePos = FTell();

struct
{
    
    struct
    {
        int ResourceCount;
        uint InitialHash_Magic <format=hex>;
        uint IsCompressed;
    } Header;
    
    local int i = 0;
    
    for (i = 0; i < Header.ResourceCount; i++)
    {
        FSeek(BaseFilePos + 0x0C + (i * 0x10));
        struct
        {
            uint Hash <format=hex>;
            uint ResourceOffset <format=hex>;
            uint ResourceSize <format=hex>;
            union 
            {
                uint Value <format=hex>;
                struct
                {
                    ushort Width;
                    ushort Height;
                } WH;
            } ResourceMetadata;
            
            if (BaseFilePos != DOL_Toc1_Offset)
            {
                FSeek(BaseFilePos + ResourceOffset);
                byte ResourceData[ResourceSize];
            }
        } Resource;
    }
} Pak;

///////////////////////////////////
// Hashing
///////////////////////////////////

// 0x800f1fb4 - SearchByHash(WiiStorageDVD *param_1, char *path, PakWrapper *param_3)
uint Hash(string str)
{
    local int i = 0;
    local uint value = Pak.Header.InitialHash_Magic; // Unk bool in header might be used as start value?
    
    // If starts by \, skip x chars
    // If is below 48 (below number range), skip x chars
    // Then start looping 
    
    local string s = str;
    local int strLen = Strlen(str);
    for (i = 0; i < strLen; i++)
    {
        str[i] = ToLower(str[i]);
        
        if (str[i] == '\\')
            continue;
            
        if (str[i] != '\\' && str[i] != '/')
            value = (uint)(str[i] ^ (uint)(value << 5 | value >> 27));
    }
    
    return value;
}

// One valid file:
//Printf("%x", Hash("res/images/levelimages/OCD_flag1.png.binbig"));
