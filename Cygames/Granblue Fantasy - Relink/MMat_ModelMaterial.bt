//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------



typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

FlatArkHeader Hdr;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[1]);
uint Field1_Magic <bgcolor=cRed, format=hex, comment="Enforced, cannot be different">;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[2]);
struct
{
    int DataOffset <bgcolor=cBlue, format=hex>;

    FSeek(startof(DataOffset) + DataOffset);
    struct
    {
        int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
        int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
        
        local int i = 0;
        for (i = 0; i < NumEntries; i++)
        {
            FSeek(startof(Offsets[i]) + Offsets[i]);
            struct
            {
                FlatArkFields Fields;
                
                FSeek(startof(Fields) + Fields.OffsetTable[1]);
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                    struct
                    {
                        uint param_hash <format=hex>;
                        ushort value_or_offset;
                        ushort value_type;
                    } ShaderParamInfo[NumEntries] <bgcolor=cBlue>;
                } shader_params;
                
                FSeek(startof(Fields) + Fields.OffsetTable[2]);
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    
                    int NumEntries2 <fgcolor=cGreen, bgcolor=cBlue>;
                    int Offsets2[NumEntries2] <format=hex, fgcolor=cRed>;
                    local int j = 0;
                    for (j = 0; j < NumEntries2; j++)
                    {
                         FSeek(startof(Offsets2[j]) + Offsets2[j]);
                         struct
                         {
                             FlatArkFields Fields;
                             
                             FSeek(startof(Fields) + Fields.OffsetTable[1]);
                             uint shader_map_name_hash <bgcolor=cBlue, format=hex>;
                             
                             FSeek(startof(Fields) + Fields.OffsetTable[2]);
                             struct
                             {
                                uint NameOffset <bgcolor=cBlue>;
                                FSeek(startof(NameOffset) + NameOffset);
                                uint strLen <fgcolor=cGreen, bgcolor=cBlue>;
                                char str[strLen] <bgcolor=cBlue>;
                             } texture_name;
                         } TextureMapInfo;
                    }
                } texture_maps;
                
                FSeek(startof(Fields) + Fields.OffsetTable[3]);
                struct
                {
                    int DataOffset <format=hex, fgcolor=cRed>;
                    FSeek(startof(DataOffset) + DataOffset);
                    int ArrLength <fgcolor=cGreen, bgcolor=cBlue>;
                    short Arr[ArrLength] <bgcolor=cBlue>;
                } constant_buffer_indices;

                if (Fields.OffsetTable[4])
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[4]);
                    struct
                    {
                        int DataOffset <format=hex, fgcolor=cRed>;
                        FSeek(startof(DataOffset) + DataOffset);
                        FlatArkFields Fields2;
                        
                        FSeek(startof(Fields2) + Fields2.OffsetTable[1]);
                        struct
                        {   
                            uint ArrOffset <bgcolor=cBlue>;
                            FSeek(startof(ArrOffset) + ArrOffset);
                            int NumEntries <fgcolor=cGreen, bgcolor=cBlue>;
                            struct
                            {
                                int StrOffset <bgcolor=cBlue>;
                                FSeek(startof(StrOffset) + StrOffset);
                                
                                int StrSize <fgcolor=cGreen, bgcolor=cBlue>;
                                char Str[StrSize] <bgcolor=cBlue>;
                            } Str[NumEntries];
                        } page_files;
                        
                        FSeek(startof(Fields2) + Fields2.OffsetTable[2]);
                        struct
                        {
                            int ArrOffset <bgcolor=cBlue>;
                            FSeek(startof(ArrOffset) + ArrOffset);
                            int ArrLen <fgcolor=cGreen, bgcolor=cBlue>;
                            int Arr[ArrLen] <bgcolor=cBlue>;
                        } layer_to_shader_map_name_hash;
                        
                        if (exists(Fields2.OffsetTable[3]) && Fields2.OffsetTable[3] != 0)
                        {
                           FSeek(startof(Fields2) + Fields2.OffsetTable[3]);
                           byte unk3 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields2.OffsetTable[4]) && Fields2.OffsetTable[4] != 0)
                        {
                           FSeek(startof(Fields2) + Fields2.OffsetTable[4]);
                           byte unk4 <bgcolor=cBlue>;
                        }
                        
                        if (exists(Fields2.OffsetTable[5]) && Fields2.OffsetTable[5] != 0)
                        {
                           FSeek(startof(Fields2) + Fields2.OffsetTable[5]);
                           byte tile_set_number <bgcolor=cBlue>;
                        }
                    } granite_params;
                }
                
                FSeek(startof(Fields) + Fields.OffsetTable[5]);
                int unique_material_name_hash_maybe <bgcolor=cBlue, format=hex>;
                
                if (exists(Fields.OffsetTable[6]) && Fields.OffsetTable[6] != 0)
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[6]);
                    byte shader_type <bgcolor=cBlue>;
                }
                
                if (exists(Fields.OffsetTable[7]) && Fields.OffsetTable[7] != 0)
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[7]);
                    byte shader_sub_type <bgcolor=cBlue>;
                }
                
                if (exists(Fields.OffsetTable[8]) && Fields.OffsetTable[8] != 0)
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[8]);
                    byte unk_type_8 <bgcolor=cBlue>;
                }
                
                if (exists(Fields.OffsetTable[9]) && Fields.OffsetTable[9] != 0)
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[9]);
                    byte bool9 <bgcolor=cBlue>;
                }
                
                if (exists(Fields.OffsetTable[10]) && Fields.OffsetTable[10] != 0)
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[10]);
                    byte bool10 <bgcolor=cBlue>;
                }
                
                if (exists(Fields.OffsetTable[11]) && Fields.OffsetTable[11] != 0)
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[11]);
                    byte bool11 <bgcolor=cBlue>;
                }
                
                if (exists(Fields.OffsetTable[12]) && Fields.OffsetTable[12] != 0)
                {
                    FSeek(startof(Fields) + Fields.OffsetTable[12]);
                    byte bool12 <bgcolor=cBlue>;
                }
            } MaterialEntry; 
        }
    } Material;
} materials <bgcolor=cBlue>;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[3]);
struct
{
    int DataOffset <bgcolor=cGray, format=hex>;
    FSeek(startof(DataOffset) + DataOffset);
    
    int NumEntries <fgcolor=cGreen, bgcolor=cGray>;
    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
    
    local int i = 0;
    for (i = 0; i < NumEntries; i++)
    {
        FSeek(startof(Offsets[i]) + Offsets[i]);
        struct
        {
            FlatArkFields Fields;
            
            FSeek(startof(Fields) + Fields.OffsetTable[1]);
            struct
            {
                uint BufferOffset <bgcolor=cGray>;
                FSeek(startof(BufferOffset) + BufferOffset);
                uint BufferSize <fgcolor=cGreen, bgcolor=cGray>;
                uint Buffer[BufferSize] <bgcolor=cGray>;
            } buffer <bgcolor=cGray>;
            
            FSeek(startof(Fields) + Fields.OffsetTable[2]);
            uint unk_unique_param_name_hash <bgcolor=cGray, format=hex>;
        } Entry; 
    }
} constant_buffers <bgcolor=cGray>;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[4]);
struct
{
     int ArrOffset <bgcolor=cGreen, format=hex>;
     FSeek(startof(ArrOffset) + ArrOffset);
     int ArrLen <bgcolor=cGreen>;
     int Arr[ArrLen] <bgcolor=cGreen>;
} shader_param_float_data_pool <bgcolor=cGreen>;

if (Hdr.Fields.OffsetTable[5] != 0)
{
    FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[5]);
    int Field5 <bgcolor=cYellow>;
}

if (Hdr.Fields.OffsetTable[6] != 0)
{
    FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[6]);
    byte Field6 <bgcolor=cYellow>;
}
