//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Bulk File
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: .viewb/.listb/.imageb/.texb/.matb
//  ID Bytes: 
//   History: 
//------------------------------------------------

// This template is unsuitable for prfb (prefab) files
// Some component types depend on object type names.

// Refer to GBFRDataTools for code handling of this file 
// -> https://github.com/Nenkai/GBFRDataTools/tree/master/GBFRDataTools.Files/UI

// Reminder: All hashes is XXHash32 Custom 
// - https://github.com/Nenkai/GBFRDataTools/blob/master/GBFRDataTools/Utils/XXHash32Custom.cs

// English word list, executable strings, game strings & bruteforce up to length 5 have been attempted
// on all hashes for these files known.
// There is possibly room for improvement. Perhaps specific game-related word dictionaries?
// crackstation full file list also tested additionally with "Color" and "Data" as suffix



typedef struct
{
    float X;
    float Y;
} Vec2;

typedef struct
{
    float X;
    float Y;
    float Z;
} Vec3;

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vec4;

typedef struct
{
    int StrLen;
    char Str[StrLen];
} String4;

typedef struct
{
    int Hash;
    short Unk;
    short Unk2;
} HashAndId;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            String4 File;
        }
    }
    
    FSeek(FileSize());
} FileTable;

typedef struct
{
    int FieldDataOffset;
    FSeek(startof(SubEntryOffset) + FieldDataOffset);
    
    switch (FieldNameHashes[i])
    {
        case 0x70ECEBD: // Hash("Scale")
            Vec3 vec3;
            break;
        case 0x15457247: // Hash("AnchorPoint");
            Vec2 vec2;
            break;
        case 0x340E78FF:
            Vec2 vec2;
            break;
        case 0x3FA67E6D: // Hash("AssetPath");
            String4 str; 
            break;
        case 0x44A14F6E:
            Vec2 vec2;
            break;
        case 0x8824FB49:
            Vec2 vec2;
            break;  
        case 0x906076C7: // Hash("Rotation")
            Vec4 vec4;
            break;   
        case 0x92EB81BE: // Hash("SizeDelta");
            Vec2 vec2;
            break;     
        case 0x98ABE892: // Hash("Active")
            int value;
            break;  
        case 0xA14FC2CE: // Hash("Pivot")
            Vec2 vec2;
            break;
        case 0xC1717AC7:
            float Unk_C1717AC7;
            break;
                   
        default:
            Warning("Unsupported %x", FieldNameHashes[i]);
            break;
    }
    
    FSeek(FileSize());
} LayoutAttribute;

typedef struct
{
    int SubEntryCount;
    int Offs[SubEntryCount];
    
    local int j = 0;
    for (j = 0; j < SubEntryCount; j++)
    {
        FSeek(startof(SubEntryCount) + Offs[j]);
        
        struct
        {
            int SubEntryOffset;
            FSeek(startof(SubEntryOffset) + SubEntryOffset);
            int NumFields;
            int FieldNameHashes[NumFields] <format=hex>;
            
            local int i = 0;
            for (i = 0; i < NumFields; i++)
            {
                FSeek(startof(SubEntryOffset) + 4 + (i * 4));
                LayoutAttribute layoutAttribute;
            }
        } Layout;
    }
} Layouts;
         
typedef struct
{
    int SubEntryCount;
    int Offs[SubEntryCount];
        
    local int j = 0;
    for (j = 0; j < SubEntryCount; j++)
    {
        FSeek(startof(SubEntryCount) + Offs[j]);
        String4 MaterialName;
    }
    
    FSeek(FileSize());
} Materials;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x29F23D69: // Hash("Ita")
                    FileTable Ita;
                    break;
                case 0x58A2F4E7: // Hash("Common");
                    FileTable Common;
                    break;
                case 0x7E613519: // Hash("Eng");
                     FileTable Eng;
                    break;
                case 0x84D06053: // Hash("Kor");
                     FileTable Kor;
                    break;
                case 0xB41B79AF: // Hash("Cht");
                     FileTable Cht;
                    break;
                case 0xBBAB1E9C: // Hash("Esp");
                    FileTable Esp;
                    break;
                case 0xCF88F342: // Hash("Deu");
                    FileTable Deu;
                    break;
                case 0xD9C5540A: // Hash("Fra");
                    FileTable Fra;
                    break;
                case 0xDA3F7BEB: // Hash("Chs");
                    FileTable Chs;
                    break;
                case 0xDE91FFDB: // Hash("Por");
                    FileTable Por;
                    break;
                case 0xE6C3B0EA: // Hash("Jpn");
                    FileTable Jpn;
                    break;
                default:
                    Printf("Unsupported %x\n", EntriesHashes[i]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} LocalizeTable;

typedef struct
{
    int SubEntryCount;
    int Offs[SubEntryCount];
        
    local int j = 0;
    for (j = 0; j < SubEntryCount; j++)
    {
        FSeek(startof(SubEntryCount) + Offs[j]);
        String4 AnimationFile;
    }
    
    FSeek(FileSize());
} Animations;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0xA64D9A97:
                    uint UnknownHash <format=hex>; // abilityelement.image.imageb matches -> 116EAB7F|hud_guide_command.tex.texb|hud_cmnd_ablt_icon01
                    break;
                    
                case 0xF3BF53BF:
                    String4 PathName;
                    break;
                    
                default:
                    Printf("Unsupported %x\n", EntriesHashes[i]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Unk_26E9CB0E_Entry;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            Unk_26E9CB0E_Entry entry;
        }
    }
    
    FSeek(FileSize());
} Unk_26E9CB0E;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x8B4F6DA: // Hash("Force");
                    int force;
                    break;
                case 0x2E182583: // Hash("Language");
                    String4 language;
                    break;
                case 0x6C9EC8F9: // Hash("Material");
                    String4 material;
                    break;
                case 0xA93808B8:
                    int unk;
                    break;
                case 0xB58C064F: // Hash("Font");
                    String4 unk;
                    break;
                case 0xCC64EBE9:
                    int unk;
                    break;
                case 0xFEA3133C:
                    int unk;
                    break;
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Unk_EBA87EEE_Entry;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            Unk_EBA87EEE_Entry entry;
        }
    }
    
    FSeek(FileSize());
} Unk_EBA87EEE;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x125D85E2: // Hash("MinSize");
                    Vec2 Unk;
                    break;
                case 0x2FE9E963: // Hash("Rect");
                    float Rect[4];
                    break;
                case 0x31BE5C4D: // Hash("Name");
                    String4 Name;
                    break;
                case 0xBD6AFEDB: // Hash("Padding");
                    float Padding[4];
                    break;
                case 0xDAD18D6A: // Hash("Uv");
                    float Uv[4];
                    break;
                case 0xE94449C7: // Hash("Border");
                    float Border[4];
                    break;
                case 0xA64D9A97:
                    uint UnkID;
                    break;
                case 0xF3BF53BF:
                    String4 Name;
                    break;
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Sprite;


typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            Sprite sprite;
        }
    }
    
    FSeek(FileSize());
} Sprites;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            int index;
        }
    }
    
    FSeek(FileSize());
} Indices;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x28951342: // Hash("Indexes");
                    Indices indices;
                    break;
                    
                case 0xF743169F: // Hash("Layer");
                    String4 Layer;
                    break;
                    
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Base;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x28951342: // Hash("Indexes");
                    Indices indices;
                    break;
                    
                case 0xF743169F: // Hash("Layer");
                    String4 Layer;
                    break;
                    
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Change;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x52DD696D:
                    String4 str;
                    break;
                    
                case 0x8A70E473:
                    int Unk;
                    break;
                    
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} State;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            State state;
        }
    }
    
    FSeek(FileSize());
} States;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            int default_;
        }
    }
    
    FSeek(FileSize());
} Defaults;


typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x1E1B3D63: // Hash("States");
                    States state;
                    break;
                    
                case 0xF743169F: // Hash("Layer");
                    String4 Layer;
                    break;
                  case 0x31BE5C4D: // Hash("Name");
                    String4 Name;
                    break;
                    
                case 0x7A730034: // Hash("Defaults");
                    Defaults defaults;
                    break;
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Layer;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            Layer layer;
        }
    }
    
    FSeek(FileSize());
} Layers;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            int unk;
        }
    }
    
    FSeek(FileSize());
} Children;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0xAA7F0BC:
                    Vec4 unk;
                    break;
                    
                case 0x27AA1BB2:
                    uint unk;
                    if (unk != 0)
                        Printf("check 0x27AA1BB2, it has data");
                    break;
                    
                case 0x2E182583: // Hash("Language");
                    String4 lang;
                    break;
                    
                case 0x2EE79205:
                    byte unk;
                    break;
                case 0x4DA717B6:
                    byte unk;
                    break; 
                    
                case 0x55785a4f:
                    float unk;
                    break;
                case 0x6d2247b4:
                    byte unk;
                    break;
                case 0x870f6ced: // Hash("Alignment");
                    uint unk;
                    break;
                case 0xc9af522b:
                    uint unk;
                    break;
                case 0xf5c00531:
                    byte unk;
                    break;
                case 0xf7acd4b0:
                    uint unk;
                    break;
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Overwrite;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            Overwrite overwrite;
        }
    }
    
    FSeek(FileSize());
} Overwrites;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            String4 clip;
        }
    }
    
    FSeek(FileSize());
} Clips;

typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x35D67B04:
                    uint unk;
                    break;
                    
                case 0x482def63:
                    Clips clips;
                    break;
                    
                case 0xafe3f6cb:
                    String4 unk;
                    break;
                    
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Handle;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            Handle handle;
        }
    }
    
    FSeek(FileSize());
} Handles;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            HashAndId hashAndId;
        }
    }
    
    FSeek(FileSize());
} HashAndIdArray;


struct Component;
typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x20ACD12F: // Hash("ComponentName");
                    String4 Name;
                    break;
                case 0xF8509C51: // Hash("Component");
                    Component Actual;
                    break;
                case 0x4748DA1E: // Hash("Enable");
                    int Enable;
                    break;
                case 0x7D371D2A: // Hash("Chara");
                    uint UnkID <format=hex>; // ability_info01_01.prfb matches -> 74977C9A|bs_info_gene01.prfb|CharaInfo
                    break;
                case 0x2C8BB048: // Hash("Ability");
                    uint Ability; // Seems correct
                    break;
                    
                case 0x23692D14: // Hash("Base");
                    Base base;
                    break;
                case 0x85D4C2B5: // Hash("Change");
                    Change change;
                    break;
                case 0xC6BC980B: // Hash("Layers");
                    Layers layers;
                    break;
                case 0x5C966E81: // Hash("Alpha");
                    float Alpha; 
                    break;
                case 0x4261D1CF: // Hash("Type");
                    uint Type; 
                    break;
                case 0x58EA9D9D: // Hash("Color");
                    Vec4 color;
                    break;
                case 0x13834834: // Hash("Offset");
                    uint offset;
                    break;
                case 0xDFBC86DD:
                    byte unk;
                    break;
                    
                case 0x46A7584B:
                    Vec4 unk;
                    break;
                case 0xFB9DC6C1:
                    uint unk;
                    break;
                case 0x535E7C5C:
                    String4 test;
                    break;
                    
                case 0xBC09163B: // Hash("Sprite")
                    Sprite sprite;
                    break;
                case 0x773D4AEB:
                    uint unk;
                    break;
                case 0x313026fd:
                case 0x31478c15:
                case 0x31be5c4d: // Hash("Name");
                    uint a;
                    uint b;
                    break;
                    
                case 0x35d67b04:
                case 0x36c26097: // Hash("Text");
                case 0x45591B6B:
                case 0x463334FD:
                case 0x4B21B805:
                case 0x5269A9A2:
                case 0x5B46366A:
                case 0x67078166: // Hash("Cursor");
                case 0x780D8DAF:
                case 0x83A76256:
                case 0x97DF7F59:
                case 0x2DA95AA8:
                case 0x388ce724: // Hash("Repeat");
                case 0x52f46e0c: // Hash("Always");
                case 0x5806F751: // Hash("Inverse");
                case 0x8b902893: // Hash("Logic");
                case 0xB849A1A5: // Hash("Push");
                case 0x1e2b88fe:
                    uint unk;
                    break;
                case 0xFA4EFD5C: 
                    uint a;
                    uint b;
                    break;
                case 0x57088074:
                    byte unk;
                    break;
                case 0x61743b79: // Hash("Decide");
                case 0x84be1b4f: // Hash("Sub");
                case 0x90A4682B: // Hash("Add");
                    String4 unk;
                    break;
                case 0xcf337aae: // Hash("Rate");
                    float unk;
                    break;
                case 0xdb954add:
                    byte unk;
                    break;
                    
                case 0x97bd2c31:
                    uint unk;
                    break;
                case 0x96692ae1: // Hash("Overwrites");
                    Overwrites unk; // TODO int array
                    break;
                case 0xd344f022:
                    byte val;
                    break;
                case 0xdc516826:
                    String4 unk;
                    break;
                case 0x2db4d56d:
                    float unk;
                    break;
                case 0x6450f58a:
                    Vec4 unk;
                    break;
                case 0x8417538f: // Hash("Margin");
                    Vec4 unk;
                    break;
                case 0x870f6ced:
                    ushort unk;
                    break;
                case 0x9940bed3:
                    Vec4 unk;
                    break;
                case 0xa032dc7e:
                    byte unk;
                    break;
                case 0xa0eb46c1:
                    String4 unk;
                    break;
                case 0xb25c2733:
                    Vec4 unk;
                    break;
                case 0xb94d87a0:
                case 0xa560733e: // Hash("Dark");
                    byte unk;
                    break;
                case 0xe655dec6:
                    Vec4 unk;
                    break;
                case 0xf7acd4b0:
                    float unk;
                    break;
                case 0xfc0a21b4:
                    float unk;
                    break;
                case 0x1e6da1bb: // Hash("Spacing");
                    int unk;
                    break;
                case 0x6c9ec8f9: // Hash("Material");
                    String4 unk;
                    break;
                case 0xb58c064f: // Hash("Font");
                    String4 unk;
                    break;
                case 0xc4d5468c: // Hash("Handles");
                    Handles unk;
                    break;
                case 0x4c65033b:
                    HashAndIdArray arr;
                    break;
                case 0x5a6dbf53:
                case 0x704edb91:
                case 0x99417083:
                    HashAndId unk;
                    break; 
                case 0x91d560d5: // Hash("Buttons");
                    HashAndIdArray a;
                    break; 
                case 0xc5dba866: // Hash("Texts");
                    HashAndIdArray unk;
                    break;
                case 0xc99530e1:
                    String4 aa;
                    break;
                case 0x262c5f36:
                case 0x706e9d09:
                case 0x7a188f27:
                case 0x87d09fad:
                case 0x8bb59b31:
                case 0xd968927a:
                case 0x126226ea:
                    byte unk;
                    break;
                case 0xBD6AFEDB: // Hash("Padding");
                    float Padding[4];
                    break;
                case 0x4b278c5b:
                case 0xf99dbd76:
                case 0xeb3751e7:
                    uint unk;
                    break;
                case 0x1fb399e5:
                case 0x6dea1a08:
                case 0x866fc65c:
                case 0xd13ca02b:
                    float unk;
                    break;
                case 0x8223be2f:
                    String4 unk;
                    break;
                case 0xcf40e204:
                    HashAndId unk;
                    break;
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} Component;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            Component component;
        }
    }
    
    FSeek(FileSize());
} Components;

struct PrefabObjects;
typedef struct
{
    local int tableOffset = FTell();
    
    int NumEntriesOffset;
    FSeek(startof(NumEntriesOffset) + NumEntriesOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
       
    FSeek(tableOffset + 4);
    int EntryOffsets[NumberOfEntries];
    
    local int j = 0;
    for (j = 0; j < NumberOfEntries; j++)
    {
        FSeek(tableOffset + EntryOffsets[j]);
        struct
        {
            switch (EntriesHashes[j])
            {
                case 0x70ECEBD: // Hash("Scale");
                    Vec2 Scale;
                    break;
                 case 0x15457247: // Hash("AnchorPoint");
                    Vec2 vec2;
                    break;
                case 0x2B7EE8A1: // Hash("Components");
                    Components test;
                    break;
                case 0x31BE5C4D: // Hash("Name");
                    String4 Name;
                    break;
                case 0x340E78FF:
                    Vec2 unk;
                    break;
                case 0x44A14F6E:
                    Vec2 unk;
                    break;
                case 0x8824FB49:
                    Vec2 unk;
                    break;
                case 0x8D2F22F2: // Hash("Children");
                    Children child;
                    break;
                case 0x906076C7: // Hash("Rotation")
                    Vec4 vec4;
                    break;
                case 0x92EB81BE: // Hash("SizeDelta")
                    Vec2 vec2;
                    break;
                case 0x98ABE892: // Hash("Active")
                    int value;
                    break;  
                case 0xA14FC2CE: // Hash("Pivot")
                    Vec2 vec2;
                    break;
                case 0xC1717AC7:
                    float unk;
                    break;
                case 0xD8D5FD93: // Hash("Position");
                    Vec3 Position;
                    break;
                case 0xE4CF52DE: // Hash("Id");
                    uint Id;
                    break;
                default:
                    Printf("Unsupported %x\n", EntriesHashes[j]);
                    break;
            }
        } Field;
    }
    
    FSeek(FileSize());
} PrefabObject;

typedef struct
{
    int SubEntryCount;
    
    if (SubEntryCount > 0)
    {
        int Offs[SubEntryCount];
            
        local int j = 0;
        for (j = 0; j < SubEntryCount; j++)
        {
            FSeek(startof(SubEntryCount) + Offs[j]);
            PrefabObject object;
        }
    }
    
    FSeek(FileSize());
} PrefabObjects;

struct
{
    int TableOffset <format=hex>;
    
    FSeek(TableOffset);
    int RevOffset;
    
    FSeek(startof(RevOffset) + RevOffset);
    int NumberOfEntries;
    uint EntriesHashes[NumberOfEntries] <format=hex>;
    
    FSeek(startof(RevOffset) + 4);
    int EntryOffsets[NumberOfEntries];
             
    local int i = 0;
    for (i = 0; i < NumberOfEntries; i++)
    {
        FSeek(startof(RevOffset) + EntryOffsets[i]);
        
        switch (EntriesHashes[i])
        {
            case 0xEC305D91: // Hash("Layouts");
                Layouts Layouts_;
                break;
            
            // list.listb
            case 0x5A616DF1: // Hash("Materials");
                Materials Materials_;
                break;
            case 0x698F193B: // Hash("AtlasData");
                LocalizeTable UnkNames;
                break;
            case 0x70012652: // Hash("Animations");
                Animations Animations_;
                break;
            case 0x9029CEE4:
                int unk;
                if (unk > 0)
                    Printf("9029CEE4 has data, unmapped yet");
                break;
            case 0xB6AF00CA: // Hash("TextureData");
                LocalizeTable unk_B6AF00CA;
                break;
            case 0xDC516826: // Hash("LanguageData");
                FileTable LanguageData;
                break;
            case 0xE986E3BF: // Hash("ImageData");
                FileTable unk_E986E3BF;
                break;
                
            // image.imageb
            case 0x26E9CB0E:
                Unk_26E9CB0E unk_E986E3BF;
                break;
                
            // lang.langb
            case 0xEBA87EEE:
                Unk_EBA87EEE a;
                break;
                
            // tex.texb
            case 0x3B01796E: // Hash("Filter");
                int Filter;
                break;
            case 0x74A903BD: // Hash("Wrap");
                int Wrap;
                break;
            case 0xE69DCB46: // Hash("Size");
                Vec2 Size;
                break;
            case 0xF638659D: // Hash("Sprites");
                Sprites Sprites_;
                break;
                
            // mat.matb
            case 0x27E0E2B:
                uint UnkColor_27E0E2B;
                break;
            case 0x91FA80E:
                uint Unk_91FA80E;
                break;
            case 0xB9FF5F2:
                uint Unk_B9FF5F2;
                break;
            case 0x259D1272:
                float Unk_259D1272;
                break;
            case 0x3A20E9D0:
                float Unk_3A20E9D0;
                break;
            case 0x3B78C221: // Hash("FaceColor");
                Vec4 Unk_3B78C221;
                break;
            case 0x3E2A81D8:
                String4 Unk_3E2A81D8;
                break;
            case 0x441547F2:
                float Unk_441547F2;
                break;
            case 0x4A7281DC:
                float Unk_4A7281DC;
                break;
            case 0x5FE3E992:
                float Unk_5FE3E992;
                break;
            case 0x6CEA21BE: // Hash("UnderlayColor");
                float UnkColor_6CEA21BE[4];
                break;
            case 0x73D3C558:
                float Unk_73D3C558;
                break;
            case 0x782A1E2C: // Hash("GlowColor")
                Vec4 Unk_782A1E2C;
                break;
            case 0x81FF4BE7:
                float Unk_81FF4BE7;
                break;
            case 0x9224EC42: // Hash("OutlineWidth");
                float Unk_9224EC42;
                break;
            case 0x931ACDFD:
                float Unk_931ACDFD;
                break;
            case 0xA2EB4DAD:
                float Unk_A2EB4DAD;
                break;
            case 0xA9335950:
                float Unk_A9335950;
                break;
            case 0xB01407ED: // Hash("Blend");
                float Blend;
                break;
            case 0xB9CB0755: // Hash("OutlineColor");
                Vec4 Unk_B9CB0755;
                break;
            case 0xBC57E8F6:
                float Unk_BC57E8F6;
                break;
            case 0xF2927894:
                float Unk_F2927894;
                break;
            case 0xFCEFC255:
                float Unk_FCEFC255;
                break;
            // prfb
            case 0xBB92EADE: // Hash("Objects");
                PrefabObjects Objects;
                break;
            default:
               Printf("Unsupported %x\n", EntriesHashes[i]);
               break;
        }
    }
} BulkFile;
