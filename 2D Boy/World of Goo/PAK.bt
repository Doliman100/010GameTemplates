//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: World of Goo Wiiware Data Package (00000002.app) - master.pak
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Note1: may not stricly be used for just master.pak
// Note2: Embedded pak at 0x802823e0 of executable (0x27E4E0 physical address) - default pak?
// Note3: Another one at 0x80289020 (0x285120 physical address) - with unk param 1 at 0x08
// Note4: Searching for hash is just done through top to bottom, no binary searching - also other paks may be used
// Note5: If there is any compression, it'll most likely be LZ as random chunks of text can be seen throughout
// Note6: Compression is maybe handled outside file system code.

BigEndian();

// 0x800f1fb4 - SearchByHash(WiiStorageDVD *param_1, char *path, PakWrapper *param_3)
uint Hash(string str)
{
    local int i = 0;
    local uint value = Header.InitialHash_Magic; // Unk bool in header might be used as start value?
    
    // If starts by \, skip x chars
    // If is below 48 (below number range), skip x chars
    // Then start looping 
    
    local string s = str;
    local int strLen = Strlen(str);
    for (i = 0; i < strLen; i++)
    {
        str[i] = ToLower(str[i]);
        
        if (str[i] == '\\')
            continue;
            
        if (str[i] != '\\' && str[i] != '/')
            value = (uint)(str[i] ^ (uint)(value << 5 | value >> 27));
    }
    
    return value;
}

struct
{
    struct
    {
        int ResourceCount;
        uint InitialHash_Magic;
        uint UnkBool <comment="Package is processed differently if this isn't 0, i.e file sizes aren't present?">;
    } Header;
    
    local int basePos = FTell();
    local int i = 0;
    
    for (i = 0; i < Header.ResourceCount; i++)
    {
        FSeek(0x0C + (i * 0x10));
        struct
        {
            uint Hash <format=hex>;
            uint FileOffset <format=hex>;
            uint FileSize <format=hex>; // Not there if Header.UnkBool is not 0
            ushort Unk <format=hex>;
            ushort Unk2 <format=hex>;
            
            FSeek(FileOffset);
            byte Data[FileSize];
        } Entry;
    }
} Header;

// One valid file:
// Hash("res/images/levelimages/OCD_flag1.png.binbig");
