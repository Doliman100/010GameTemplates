//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// Unfinished. Used debug symbols to guide me through.

// Does not exactly follow the actual DX9 enum, but translated values to the right ones
enum <ushort> D3DDECLTYPE 
{ 
    D3DDECLTYPE_UNUSED = 0,
    D3DDECLTYPE_D3DCOLOR = 1,
    D3DDECLTYPE_FLOAT1 = 4,
    D3DDECLTYPE_UBYTE4,
    D3DDECLTYPE_SHORT2,
    D3DDECLTYPE_SHORT4,
    D3DDECLTYPE_FLOAT2,
    D3DDECLTYPE_FLOAT3,
    D3DDECLTYPE_FLOAT4,
    D3DDECLTYPE_UDEC3,
    D3DDECLTYPE_FLOAT16_2,
    D3DDECLTYPE_FLOAT16_4,
    D3DDECLTYPE_D3DCOLOR_14,
    D3DDECLTYPE_UBYTE4N = 15,
    D3DDECLTYPE_SHORT2N,
    D3DDECLTYPE_SHORT4N,
    D3DDECLTYPE_USHORT2N,
    D3DDECLTYPE_USHORT4N,
    D3DDECLTYPE_DEC3N,
    D3DDECLTYPE_BYTE4,
    D3DDECLTYPE_BYTE4N,
};

enum<ushort> ExportData_DataType
{
    TYPE_U16=0,
    TYPE_U32=1,
    TYPE_S16=2,
    TYPE_S32=3,
    TYPE_F32=4,
    TYPE_U8_4=5,
    TYPE_S16_2=6,
    TYPE_S16_4=7,
    TYPE_F32_2=8,
    TYPE_F32_3=9,
    TYPE_F32_4=10,
    TYPE_U10_3=11,
    TYPE_F16_2=12,
    TYPE_F16_4=13,
    TYPE_U8_4_COL=14,
    TYPE_U8_4_NORM=15,
    TYPE_S16_2_NORM=16,
    TYPE_S16_4_NORM=17,
    TYPE_U16_2_NORM=18,
    TYPE_U16_4_NORM=19,
    UNUSED=20,
    TYPE_S32_2=21,
    TYPE_S10_3_NORM=22,
    TYPE_S8_4=23,
    TYPE_S8_4_NORM=24,
    N_DATA_TYPES=25
};

enum <ushort> ExportData_VertexDataUsage
{
    VERTEX_DATA_UNKNOWN=0,
    VERTEX_DATA_POSITION=1,
    VERTEX_DATA_NORMAL=2,
    VERTEX_DATA_TEXTURE_COORD=3,
    VERTEX_DATA_COLOUR=4,
    VERTEX_DATA_WEIGHT=5,
    VERTEX_USAGE_MAX=6
};

struct PAK_SECTION_HEADER_s
{
    LittleEndian();
    char sectionID[4];
    int nVersion;
    int nSize;

    if (sectionID == "ENDI")
        bigEndian = true;

    if (bigEndian)
        BigEndian();
};

typedef struct VertexElement
{
    short stream;
    short offset <format=hex>;
    D3DDECLTYPE type;
    byte method;
    ExportData_VertexDataUsage usage;
    byte usageIndex;
};

struct MaterialData
{
    uint nElements;

    struct
    {
        uint Unused_nElements <comment="Must at least be > 0">;
        
        struct
        {
            uint nDescriptions;
            struct
            {
                ExportData_DataType type;
                ushort unk;
                ushort unk2;
            } MaterialDescription[nDescriptions];
        } MaterialDescriptions;

        uint nElements;

        local int i = 0;
        struct
        {
            
            local int j;
            for (j = 0; j < MaterialDescriptions.nDescriptions; j++)
            {
                switch (MaterialDescriptions.MaterialDescription[j].type)
                {
                    case TYPE_U16:
                        short data <format=hex>;
                        break;

                    case TYPE_S16_2:
                        short data_0 <format=hex>;
                        short data_1 <format=hex>;
                        break;

                    case TYPE_U32:
                        uint data <format=hex>;
                        break;

                    default:
                        Printf("Unsupported: %s", EnumToString(MaterialDescriptions.MaterialDescription[j].type));
                }
            }
        } MaterialReference[nElements] <optimize=false>;
    } Material;
};

enum ExportData_BoundsType
{
    BOUNDS_SPHERE=0,
    BOUNDS_BOX=1,
    BOUNDS_PLANE=2
};

enum <ushort> ExportData_NodeConnectionType
{
    NODE_CONNECTION_TYPE_BRANCH=0,
    NODE_CONNECTION_TYPE_LEAF=1
};

enum <ushort> ExportData_NodeContentType
{
    NODE_CONTENT_TYPE_NONE=0,
    NODE_CONTENT_TYPE_MODEL=1,
    NODE_CONTENT_TYPE_DERIVED=2,
    NODE_CONTENT_TYPE_GROUP=3,
    NODE_CONTENT_TYPE_ACTOR=4,
    NODE_CONTENT_TYPE_MATRIX=5
};

typedef enum<ushort>
{
    ModelBaseHandler = 1,
    CarSubModelHandler = 2,
    StartPositionHandler = 3,
    SplitLineHandler = 4,
    CrowdDataHandler = 5,
    TvCameraDataHandler = 6,
    LightDataHandler = 7,
    SkyHandler = 9,
    SceneMaterialSettingsHandler = 10,
    FogHandler = 11,
    SHBaseHandler = 12,
    HdrHandler = 13,
    SpeedCameraHandler = 14,
    BreakthroughDataHandler = 15,
    CityModelHandler = 17,
    CombinedDataHandler = 18,
} ObjectType;

typedef struct
{
    int nStrips;

} CarSubModel;
local int bigEndian;
struct
{
    PAK_SECTION_HEADER_s header;
    PAK_SECTION_HEADER_s ss;

    struct
    {
        MaterialData data;

        int nModels;
        int nModelLayers;

        struct
        {
            int nActorData;
        } ActorDatas;

        int nVertexDeclarations;
        struct
        {
            int nElements;
            VertexElement elements[nElements];
        } VertexDeclaration[nVertexDeclarations] <optimize=false>;

        
        struct RootNode;
        {
            struct Node;
            struct Node
            {
                ushort unk;
                ExportData_NodeConnectionType unk2;
                ExportData_NodeContentType unk3;
            
                struct
                {
                    struct
                    {
                        float x;
                        float y;
                        float z;
                    } min;
            
                    struct
                    {
                        float x;
                        float y;
                        float z;
                    } max;
                } BoundingBox;
            
            
                local int c = (((8 * (int)unk2) & 0x18 | (int)unk3 & 0xFFE7) << 24) & 0x1F000000 | (((int)unk << 29) | 0 & 0xFFFFFF) & 0xE0FFFFFF;
                local int c2 = c >> 24;
            
                if (unk2 == NODE_CONNECTION_TYPE_LEAF)
                {
                    byte hasData;
                    if (hasData)
                    {
                        ObjectType Type;
                        short Version;
    
                        switch (Type)
                        {
                            case CarSubModelHandler:
                                CarSubModel md;
                        }
                    }
                }
                else
                {
                    int unk;
                    int nElements;
                
                
                    if (unk3 == NODE_CONTENT_TYPE_GROUP)
                        Node n[nElements];
                }
                
            } root;
        } tree;

    } SceneData;
} File;

