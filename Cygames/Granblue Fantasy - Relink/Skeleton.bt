//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Model Skeleton (.skeleton)
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: .skeleton
//  ID Bytes: 
//   History: 
//------------------------------------------------

// NOTE: This file is a FlatBuffers file and not intended to be read with a template
// A fbs file is provided next to this file

typedef struct
{
    int FieldOffsetTableNegative <format=hex, fgcolor=cRed>;
    
    FSeek(startof(FieldOffsetTableNegative) - FieldOffsetTableNegative);
    short OffsetTableSize;
    short OffsetTable[(OffsetTableSize / sizeof(ushort)) - 1] <format=hex, fgcolor=cRed>;
    FSeek(FileSize());
} FlatArkFields <bgcolor=cBlack>;

typedef struct
{
    int FieldsOffset <format=hex, fgcolor=cRed>;
    FSeek(startof(FieldsOffset) + FieldsOffset);
    
    FlatArkFields Fields;
    FSeek(FileSize());
} FlatArkHeader <bgcolor=cPurple>;

FlatArkHeader Hdr;


FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[1]);
uint Field1_Magic <format=hex, comment="Enforced, cannot be different">;

FSeek(Hdr.FieldsOffset + Hdr.Fields.OffsetTable[2]);
struct
{
    int DataOffset <format=hex>;
    FSeek(startof(DataOffset) + DataOffset);
    
    int NumEntries;
    int Offsets[NumEntries] <format=hex, fgcolor=cRed>;
    
    local int i = 0;
    for (i = 0; i < NumEntries; i++)
    {
        FSeek(startof(Offsets[i]) + Offsets[i]);
        struct
        {
            FlatArkFields Fields;
            
            if (exists(Fields.OffsetTable[1]) && Fields.OffsetTable[1] != 0)
            {
                FSeek(startof(Fields) + Fields.OffsetTable[1]);
                struct
                {
                    short ParentIndex <bgcolor=cYellow>;
                    int Parent <bgcolor=cYellow>;
                } F1 <bgcolor=cYellow>;
            }
            
            if (exists(Fields.OffsetTable[2]) && Fields.OffsetTable[2] != 0)
            {
                FSeek(startof(Fields) + Fields.OffsetTable[2]);
                short ParentIndex <bgcolor=cYellow>;
            }
            
            FSeek(startof(Fields) + Fields.OffsetTable[3]);
            struct
            {
                int StrOffset <bgcolor=cYellow>;
                FSeek(startof(StrOffset) + StrOffset);
                int StrLen <bgcolor=cYellow>;
                char Str[StrLen] <bgcolor=cYellow>;
            } F3_Name;
            
            FSeek(startof(Fields) + Fields.OffsetTable[4]);
            float Position[3] <bgcolor=cYellow>;
            
            FSeek(startof(Fields) + Fields.OffsetTable[5]);
            float Quat[4] <bgcolor=cYellow>;
            
            FSeek(startof(Fields) + Fields.OffsetTable[6]);
            float Scale[3]  <bgcolor=cYellow>;
        } Entry; 
        
    }
        
} Field2;
