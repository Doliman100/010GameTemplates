//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: GBFR Data Index (data.i)
//   Authors: Nenkai
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

struct
{
    int MainHeaderOffset <format=hex>;
    byte Empty[6];
    short OffsetTableSize <comment="Relative to here">;
    short OffsetsToFields[(OffsetTableSize - 2) / 2] <comment="Starting from next header">;
} FileHeader <size=0x20, bgcolor=cRed>;

FSeek(FileHeader.MainHeaderOffset);
struct
{
    int OffsetTableOffsetToBehind <format=hex>;
    int UnkOffset <format=hex, fgcolor=cRed, comment="Relative to here. Pointed to by offset table entry[9]">;
    int UnkOffset2 <format=hex, fgcolor=cRed, comment="Relative to here. Pointed to by offset table entry[8]">;
    int UnkOffset3  <format=hex, fgcolor=cRed, comment="Relative to here. Pointed to by offset table entry[7]">;
    int UnkOffset4 <format=hex, fgcolor=cRed, comment="Relative to here. Pointed to by offset table entry[6]">;
    int UnkOffset5 <format=hex, fgcolor=cRed, comment="Relative to here. Pointed to by offset table entry[5]">;
    int HashTable2Offset <format=hex, fgcolor=cRed, comment="Relative to here. Pointed to by offset table entry[4]">;
    int ChunkSizeMaybe <format=hex, fgcolor=cRed>;
    int UnkOffset6 <format=hex>;
} MainHeader;


FSeek(FileHeader.MainHeaderOffset + FileHeader.OffsetsToFields[9] + MainHeader.UnkOffset);
struct
{
    int Table1Count;
    int Entries[Table1Count];
} Table1; // Num chunks maybe?

FSeek(FileHeader.MainHeaderOffset + FileHeader.OffsetsToFields[8] + MainHeader.UnkOffset2);
struct
{
    int TableCount;
    uint64 DataOffsets[TableCount] <format=hex>;
} TableUnk;

FSeek(FileHeader.MainHeaderOffset + FileHeader.OffsetsToFields[7] + MainHeader.UnkOffset3);
struct
{
    int HashCount;
    uint64 OrderedXXHash_Hashes[HashCount] <format=hex, comment="xxHash">; // Example: system/table/saveinfo.tbl
} FileHashTable;

FSeek(FileHeader.MainHeaderOffset + FileHeader.OffsetsToFields[6] + MainHeader.UnkOffset4);
struct
{
     uint32 fileCount;
     struct 
     {
        uint64 Offset <format=hex>;
        uint32 Size <format=hex>;
        uint32 CompressedSize <format=hex>; // Should be fastlz?
        uint32 header;
        byte unk0;
        byte unk1;
        byte DataFileNumber;
        byte unk2;

    } FileEntries[fileCount];
} FileEntriesTable <optimize=false>;

FSeek(FileHeader.MainHeaderOffset + FileHeader.OffsetsToFields[5] + MainHeader.UnkOffset5);
struct
{
     int EntriesCount;
     struct
     {
         int a;
         int b;
         int c;
     } UnkEntry[EntriesCount];
} Table5 <optimize=false>;

FSeek(FileHeader.MainHeaderOffset + FileHeader.OffsetsToFields[4] + MainHeader.HashTable2Offset);
struct
{
     int HashCount;
     uint64 OrderedXXHash_Hashes[HashCount] <format=hex, comment="xxHash">; // Example: system/table/saveinfo.tbl
} HashTable2 <optimize=false>; // This is the main file table, IIRC

FSeek(FileHeader.MainHeaderOffset + FileHeader.OffsetsToFields[1] + MainHeader.UnkOffset6);
uint CodeNameLength;
char CodeName[CodeNameLength];