//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: NEFS 2.0
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    //int startA;
    //int startB;
    int64 start <format=hex, fgcolor=cRed, comment="Offset to compressed data">;
    int sharedInfo <fgcolor=cYellow, comment="Shared entry info & writable shared entry info index">;
    int firstBlock <fgcolor=cYellow, comment="Block index">;
    int nextDuplicate;
} NeFileSystemTocEntry;

typedef struct
{
    short volume;
    enum <short> { Directory = 0x02, Duplicated = 0x04, Cacheable = 0x08, } flags;
} NeFileSystemTocEntryWritable;

typedef struct
{
    int parent;
    int firstChild;
    int nameOffset <format=hex, fgcolor=cRed, comment="Offset to entry name in nameTableStart">;
    int size <format=hex, fgcolor=cGreen, comment="Dir = 0">;
    int firstDuplicate;
} NeFileSystemTocSharedEntryInfo;

typedef struct
{
    int nextSibling;
    int patchedEntry;
} NeFileSystemTocSharedEntryInfoWritable;

typedef struct
{
    int end;
    short transformation;
    short checksum;
} NeFileSystemTocBlock;

typedef struct
{
    int64 size <format=hex, fgcolor=cGreen>;
    int nameOffset <format=hex, fgcolor=cRed>;
    int dataOffset <format=hex, fgcolor=cRed>;
} NeFileSystemTocVolumeInfo;

typedef struct
{
    byte data[0x20];
} NeFileSystemTocHashDigest;

typedef struct
{
    string str;
} namen;

struct NeFileSystem
{
    struct NeFileSystemTocHeader
    {
        char fourCC[4];
        byte hash[0x20] <comment="For whole toc size">;
        char aesKey[0x40];
        int tocSize <format=hex>;
        int version <format=hex, fgcolor=cPurple>;
        int numEntries <fgcolor=cGreen>;
        int userValue;
        byte randomPadding1[0xC];
        short numVolumes;
        short hashBlockSize <format=hex>;
        //short blockSize <format=hex>;
        //short splitSize <format=hex>;
        int entryTableStart <format=hex, fgcolor=cRed>;
        int writableEntryTableStart <format=hex, fgcolor=cRed>;
        int sharedEntryInfoTableStart <format=hex, fgcolor=cRed>;
        int writableSharedEntryInfoTableStart <format=hex, fgcolor=cRed>;
        int nameTableStart <format=hex, fgcolor=cRed>;
        int blockTableStart <format=hex, fgcolor=cRed>;
        int volumeInfoTableStart <format=hex, fgcolor=cRed>;
        int hashDigestTableStart <format=hex, fgcolor=cRed>;
        byte randomPadding[0x5C];

    } header <size=0x100, bgcolor=cPurple>;

    FSeek(header.entryTableStart);
    NeFileSystemTocEntry entry[header.numEntries];

    FSeek(header.writableEntryTableStart);
    NeFileSystemTocEntryWritable entryWritable[header.numEntries];

    FSeek(header.sharedEntryInfoTableStart);
    NeFileSystemTocSharedEntryInfo sharedEntryInfo[header.numEntries];

    FSeek(header.writableSharedEntryInfoTableStart);
    NeFileSystemTocSharedEntryInfoWritable test[header.numEntries];

    FSeek(header.blockTableStart);
    NeFileSystemTocBlock block;

    FSeek(header.volumeInfoTableStart);
    NeFileSystemTocVolumeInfo volumes[header.numVolumes];

    local int i = 0;
    local int numHashDigests = 0;

    for (i = 0; i < header.numVolumes; i++)
    {
        numHashDigests += (volumes[i].size - volumes[i].dataOffset) / header.hashBlockSize;
        if ((volumes[i].size - volumes[i].dataOffset) % header.hashBlockSize)
            numHashDigests++;
    }
    
    FSeek(header.hashDigestTableStart);
    NeFileSystemTocHashDigest digest[numHashDigests];
} NEFS;