//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: Forza Binary XML
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef struct
{
    short strLen;
    char str[strLen];
} xmlStr;

string PrintStrIndex(int s)
{
    return BinaryXML.Strings.Strs[s].str;
}

typedef struct
{
    if (BinaryXML.StringCount > 0xFFFF)
        uint KeyStrIndex <fgcolor=cGray, comment=PrintStrIndex>;
    else if (BinaryXML.StringCount > 0xFF)
        ushort KeyStrIndex <fgcolor=cGray, comment=PrintStrIndex>;
    else
        ubyte KeyStrIndex <fgcolor=cGray, comment=PrintStrIndex>;

    if (BinaryXML.StringCount > 0xFFFF)
        uint ValueStrIndex <fgcolor=cGray, comment=PrintStrIndex>;
    else if (BinaryXML.StringCount > 0xFF)
        ushort ValueStrIndex <fgcolor=cGray, comment=PrintStrIndex>;
    else
        ubyte ValueStrIndex <fgcolor=cGray, comment=PrintStrIndex>;

} Attribute <optimize=false>;

local int i = 0;

typedef enum<byte> 
{ 
    Node = 0x01, 
    HasAttributes = 0x02, 
    HasChildren = 0x04,
} NodeFlags;

struct CXMLNode;
struct CXMLNode
{
     NodeFlags Flags : 8 <fgcolor=cYellow>;

    if (BinaryXML.StringCount > 0xFFFF)
        uint NodeNameStrIndex <fgcolor=cGray, comment=PrintStrIndex>;
    else if (BinaryXML.StringCount > 0xFF)
        ushort NodeNameStrIndex <fgcolor=cGray, comment=PrintStrIndex>;
    else
        ubyte NodeNameStrIndex <fgcolor=cGray, comment=PrintStrIndex>;

    if (Flags & 0x02) // Attribute
    {
        byte AttributeCount <fgcolor=cGreen>;
        local int i = 0;
        Attribute Attr[AttributeCount];
    }


    if (Flags & 0x04)
    {
        short ChildNodeCount;

        local int j = 0;
        for (j = 0; j < ChildNodeCount; j++)
        {
            CXMLNode ChildNode;
        }
    }
};

struct BXML
{
    char Magic[4];
    byte Version <comment="Must not be > 2 on FH5">;
    int StringCount <fgcolor=cGreen>;
    int StringDataSize <format=hex, comment="Size of the whole string table">;

    struct 
    {
        xmlStr Strs[StringCount] <optimize=false>;
    } Strings;

    byte Flag;
    CXMLNode RootNode;

} BinaryXML;
