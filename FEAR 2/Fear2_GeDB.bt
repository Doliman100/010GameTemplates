//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: Game Database
//   Authors: Nenkai#9075
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

uint AlignValue(uint x, uint alignment)
{
    local uint mask = ~(alignment - 1);
    return (x + (alignment - 1)) & mask;
}

typedef struct
{
    int Hash <format=hex, fgcolor=cPurple>;
    byte a;
    byte b;
    short c;
} HashEntry;

struct GameDatabase
{
    struct
    {
        char Magic[4];
        int Version;
        int StringTableSize <format=hex, fgcolor=cGreen>;
        int unkSize;
        int unk;
        int unk;
        int nHashEntry;
    } Header;

    byte StringTable[Header.StringTableSize];
    HashEntry Entries[Header.nHashEntry];

    local int i = 0;
    int unkCount;
    while (i < unkCount)
    {
        struct 
        {
            int KeyStringOffset <format=hex>;

            local int cPos = FTell();
            FSeek(0x1C + KeyStringOffset);
            string str;
            FSeek(cPos);
            
            int PropertyCount;
            int HashValue <format=hex, fgcolor=cPurple>;

            local int j;
            for (j = 0; j < PropertyCount; j++)
            {
                struct
                {
                    int PropertyStringOffset <format=hex, fgcolor=cRed>;
                    cPos = FTell();
                    FSeek(0x1C + PropertyStringOffset);
                    string PropertyName;
                    FSeek(cPos);

                    int ValueCount;
                    int unkSize2;
                    int HashEntryIndex;
                    int ValueNameHash <format=hex>;

                    if (ValueCount > 0)
                        int Values[ValueCount];
                } Property;
            }
        } Table;

        i++;
    }

} GeDB;