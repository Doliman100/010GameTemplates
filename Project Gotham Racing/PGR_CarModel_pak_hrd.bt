//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: Project Gotham Racing Pack Header
//   Authors: Nenkai
//   Version: 
//   Purpose: Scene setup for model files & more
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

/* Unfinished for any other components other than model files which are parsed fully (hopefully).
   (See ContentType, only CarSubModelHandler is implemented. Implement the rest through RE-ing.). 

   Used debug symbols to guide me through (from Project Gotham Racing 3 (Network Test) [2005-10-16]).
 */

//////////////////////////////////
// Math stuff
//////////////////////////////////
typedef struct
{
    float X;
    float Y;
} VectorXY;

typedef struct
{
    float X;
    float Y;
    float Z;
} VectorXYZ;

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} VectorXYZW;

typedef struct
{
    VectorXYZW components[4];
} Matrix4;

//////////////////////////////////
// Some enums & DX stuff
//////////////////////////////////

// Does not exactly follow the actual DX9 enum, but translated values to the right ones
enum <ushort> D3DDECLTYPE 
{ 
    D3DDECLTYPE_UNUSED = 0,
    D3DDECLTYPE_D3DCOLOR = 1,
    D3DDECLTYPE_FLOAT1 = 4,
    D3DDECLTYPE_UBYTE4,
    D3DDECLTYPE_SHORT2,
    D3DDECLTYPE_SHORT4,
    D3DDECLTYPE_FLOAT2,
    D3DDECLTYPE_FLOAT3,
    D3DDECLTYPE_FLOAT4,
    D3DDECLTYPE_UDEC3,
    D3DDECLTYPE_FLOAT16_2,
    D3DDECLTYPE_FLOAT16_4,
    D3DDECLTYPE_D3DCOLOR_14,
    D3DDECLTYPE_UBYTE4N = 15,
    D3DDECLTYPE_SHORT2N,
    D3DDECLTYPE_SHORT4N,
    D3DDECLTYPE_USHORT2N,
    D3DDECLTYPE_USHORT4N,
    D3DDECLTYPE_DEC3N,
    D3DDECLTYPE_BYTE4,
    D3DDECLTYPE_BYTE4N,
};

enum<ushort> ExportData_DataType
{
    TYPE_U16=0,
    TYPE_U32=1,
    TYPE_S16=2,
    TYPE_S32=3,
    TYPE_F32=4,
    TYPE_U8_4=5,
    TYPE_S16_2=6,
    TYPE_S16_4=7,
    TYPE_F32_2=8,
    TYPE_F32_3=9,
    TYPE_F32_4=10,
    TYPE_U10_3=11,
    TYPE_F16_2=12,
    TYPE_F16_4=13,
    TYPE_U8_4_COL=14,
    TYPE_U8_4_NORM=15,
    TYPE_S16_2_NORM=16,
    TYPE_S16_4_NORM=17,
    TYPE_U16_2_NORM=18,
    TYPE_U16_4_NORM=19,
    UNUSED=20,
    TYPE_S32_2=21,
    TYPE_S10_3_NORM=22,
    TYPE_S8_4=23,
    TYPE_S8_4_NORM=24,
    N_DATA_TYPES=25
};

enum <ushort> ExportData_VertexDataUsage
{
    VERTEX_DATA_UNKNOWN=0,
    VERTEX_DATA_POSITION=1,
    VERTEX_DATA_NORMAL=2,
    VERTEX_DATA_TEXTURE_COORD=3,
    VERTEX_DATA_COLOUR=4,
    VERTEX_DATA_WEIGHT=5,
    VERTEX_USAGE_MAX=6
};

typedef struct _D3DVERTEXELEMENT9
{
    short stream;
    short offset <format=hex>;
    D3DDECLTYPE type;
    byte method;
    ExportData_VertexDataUsage usage;
    byte usageIndex;
};

enum ExportData_BoundsType
{
    BOUNDS_SPHERE=0,
    BOUNDS_BOX=1,
    BOUNDS_PLANE=2
};

enum <ushort> ExportData_NodeConnectionType
{
    NODE_CONNECTION_TYPE_BRANCH=0,
    NODE_CONNECTION_TYPE_LEAF=1
};

enum <ushort> ExportData_NodeContentType
{
    NODE_CONTENT_TYPE_NONE=0,
    NODE_CONTENT_TYPE_MODEL=1,
    NODE_CONTENT_TYPE_DERIVED=2,
    NODE_CONTENT_TYPE_GROUP=3,
    NODE_CONTENT_TYPE_ACTOR=4,
    NODE_CONTENT_TYPE_MATRIX=5
};

//////////////////////////////////////
// Sections are iterated through when loading
// and processed accordingly
/////////////////////////////////////////////

struct PAK_SECTION_HEADER_s
{
    LittleEndian();
    char sectionID[4];
    int nVersion;
    int nSize <format=hex>;

    if (sectionID == "ENDI")
        bigEndian = true;

    // version 1 enforces bigEndian, IIRC

    if (bigEndian)
        BigEndian();
};


struct MaterialData
{
    uint nElements;

    struct
    {
        uint Unused_nElements <comment="Must at least be > 0">;
        
        struct
        {
            uint nDescriptions;
            struct
            {
                ExportData_DataType type;
                ushort unk;
                ushort unk2;
            } MaterialDescription[nDescriptions];
        } MaterialDescriptions;

        uint nElements;

        local int i = 0;
        struct
        {
            
            local int j;
            for (j = 0; j < MaterialDescriptions.nDescriptions; j++)
            {
                switch (MaterialDescriptions.MaterialDescription[j].type)
                {
                    case TYPE_U16:
                        short data <format=hex>;
                        break;

                    case TYPE_S16_2:
                        short data_0 <format=hex>;
                        short data_1 <format=hex>;
                        break;

                    case TYPE_U32:
                        uint data <format=hex>;
                        break;

                    default:
                        Printf("Unsupported: %s", EnumToString(MaterialDescriptions.MaterialDescription[j].type));
                }
            }
        } MaterialReference[nElements] <optimize=false>;
    } Material;
};

typedef enum<ushort>
{
    ModelBaseHandler = 1,
    CarSubModelHandler = 2,
    StartPositionHandler = 3,
    SplitLineHandler = 4,
    CrowdDataHandler = 5,
    TvCameraDataHandler = 6,
    LightDataHandler = 7,
    SkyHandler = 9,
    SceneMaterialSettingsHandler = 10,
    FogHandler = 11,
    SHBaseHandler = 12,
    HdrHandler = 13,
    SpeedCameraHandler = 14,
    BreakthroughDataHandler = 15,
    CityModelHandler = 17,
    CombinedDataHandler = 18,
} ObjectType;

typedef struct
{
    uint offset;
    ushort nIndices;
} TriStripLod;

typedef struct (int Version)
{
    if (Version <= 2)
    {
        int nLods;
        TriStripLod stripLods[nLods];

        short vertexDeclaration;
        ushort unk;
        short unk2;
    
        if (Version > 0)
            int sortKey;
    }
    else
    {
        int nLods;
        TriStripLod stripLods[nLods];
    }

    short vertexDeclaration;
    ushort unk;
    short unk2;
    
    if (Version > 0)
        int sortKey;

} TriStrip;

typedef struct
{
    int type;
    int index;
} ExportData_IndexType;

typedef struct (int Version)
{
    ExportData_IndexType material;
    int streamSource;
    int streamIndex;

    if (Version > 2)
        int vertexOffset;

} TriStripLayer;

typedef struct (int Version)
{
    int nElements;
    for (i = 0; i < nElements; i++)
        TriStripLayer layers(Version);
    int resourceIndex;

} ModelLayer;

typedef struct (int Version)
{
    int nStrips;

    local int i = 0;
    for (i = 0; i < nStrips; i++)
        TriStrip strip(Version);

    int nLayers;
    for (i = 0; i < nLayers; i++)
        ModelLayer layer(Version);

    short code;
    byte state;
    byte flags;
} CarSubModel;

typedef struct
{
    int Empty;
    int outputBufferSize <format=hex>;
    int compressedSize <format=hex>;
    byte compressedData[compressedSize];
} ZLibCompressStreamObject;

typedef struct (int Version)
{
    byte HasData;
    if (HasData)
    {
        if (Version >= 4)
        {   
            int widthForLod;
            int heightForLod;
        }

        int widthForLod2;
        int heightForLod2;

        enum <short>
        {
          TEXTURE_A1R5G5B5 = 0x0,
          TEXTURE_A4R4G4B4 = 0x1,
          TEXTURE_R5G6B5 = 0x2,
          TEXTURE_A8R8G8B8 = 0x3,
          TEXTURE_DXT1 = 0x4,
          TEXTURE_DXT2 = 0x5,
          TEXTURE_DXT3 = 0x6,
          TEXTURE_DXT4 = 0x7,
          TEXTURE_DXT5 = 0x8,
          TEXTURE_LIN_A8R8G8B8 = 0x9,
          TEXTURE_DXN = 0xA,
        } TextureFormat;

        int nLevels <comment="Max 100">;

        if (Version >= 4)
        {
            int UnkDisplayFlags;
            int Unk2;
            int Unk3;
        }

        int outputBufferSize;
        if (Version >= 5)
        {
            ZLibCompressStreamObject compressedStreamObject;
        }   
        else
        {
            byte Data[outputBufferSize];
        }
    }
} TextureHolder;

local int bigEndian;
struct
{
    PAK_SECTION_HEADER_s header; // First size is always 0
    PAK_SECTION_HEADER_s ss;

    if (ss.sectionID == "SCNE") // Game does strncmp on each section prior
    {
        struct
        {
            // Part 0: Some definitions (not implemented fully i think, i don't recall)
            MaterialData data;
    
            int nModels;
            int nModelLayers;
    
            struct
            {
                int nActorData;
            } ActorDatas;
    
            int nVertexDeclarations;
            struct
            {
                int nElements;
                _D3DVERTEXELEMENT9 elements[nElements];
            } D3DVertexDeclaration[nVertexDeclarations] <optimize=false>;
    
            // Part 1: Scene tree
            struct RootNode
            {
                struct Node;
                struct Node
                {
                    ushort unk;
                    ExportData_NodeConnectionType ConnectionType;
                    ExportData_NodeContentType ContentType;
                
                    struct
                    {
                        VectorXYZ min;
                        VectorXYZ max;
                    } BoundingBox;
                    
                    if (ContentType == NODE_CONTENT_TYPE_MODEL)
                    {
                        byte HasData;
                        if (HasData)
                        {
                            ObjectType OBJECT_TYPE;
                            short m_Version;
    
                            switch (OBJECT_TYPE)
                            {
                                case CarSubModelHandler:
                                    CarSubModel md (m_Version);
                                    break;

                                default:
                                    Printf("OBJECT_TYPE %s not implemented!\n", EnumToString(OBJECT_TYPE));
                                    break;
                            }
                        }
                    }
                    else if (ContentType == NODE_CONTENT_TYPE_GROUP)
                    {
                        int group;
                    }
                    else
                    {
                        Printf("ContentType %s not implemented!\n", EnumToString(ContentType));
                    }
    
    
                    if (ConnectionType == NODE_CONNECTION_TYPE_BRANCH)
                    {
                        int nElements;
                        Node n[nElements] <optimize=false>;
                    }
      
                    
                } tree;
            } m_tree;
        
            // Part 2 - resources & data streams
            int nResourceBlock;
            struct
            {
                short UnkUnused;
                short version;
    
                int nStreamSource;
                struct
                {
                    int vertexBufferSize;
                    struct
                    {
                        int arrLen;
                        struct
                        {
                            short A;
                            short B;
                            short C;
                        } Indices[arrLen];
                    } GeneralDescription;
    
                    int outputBufferSize <format=hex>;
                    ZLibCompressStreamObject streamObject;
    
                    if (version >= 2)
                    {
                        struct VertexBufferInfo
                        {
                            float uvScale;
                            VectorXYZ positionOffset;
                        
                            float positionScale;
                            VectorXY uvScale;
                        } info;
                    }
                } StreamSource[nStreamSource] <optimize=false>;
    
                int IndexBufferSize;
                if (IndexBufferSize > 0)
                    ZLibCompressStreamObject indexBufferStream;
    
                int nTextureHolder;
                struct
                {
                    local int i = 0;
                    for (i = 0; i < nTextureHolder; i++)
                        TextureHolder textureHolder(version);
                } Textures <optimize=false>;
    
                if (version >= 4)
                {
                    int nUnk;
                }
            } ResourceBlock[nResourceBlock] <optimize=false>;
    
        } ExportData_SceneDX9;
    }

    // Part 3 - Misc follows, not necessary, but it's for all special car things
    PAK_SECTION_HEADER_s misc;
    if (misc.sectionID == "MISC")
    {
        struct
        {
            struct
            {
                VectorXYZ Position;
                float radius;
            } CarWheelModel[4];

            if (misc.nVersion >= 1)
                Matrix4 unk;

            if (misc.nVersion >= 2)
            {
                Matrix4 SpeedoMatrix;
                Matrix4 TachoMatrix;
            }

            if (misc.nVersion >= 3)
            {
                int nParts;
                struct
                {
                    int PartType;
                    Matrix4 matrix;
                } CarPartElements[nParts];
            }

            if (misc.nVersion >= 4)
            {
                int nCarHingedSection;
                struct CarHingedSection
                {
                    int unk;
                    Matrix4 matrix1;
                    Matrix4 matrix2;
                    int unk;
                    float unk;
                    float unk;
                    float unk;
                } m_DamagedMovingParts[nCarHingedSection] <optimize=false>;
            }
        } Misc;
    }
    
    if (FTell() == FileSize())
        Printf("OK: File was parsed fully!");
} File;
