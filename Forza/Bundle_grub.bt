//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: Forza Bundle Parser ("Grub" tag, for some reason)
//   Authors: Nenkai
//   Version: 1.09 (FH5)
//   Purpose: Storing textures, models and more
//  Category: 
// File Mask: 
//  ID Bytes: 62 75 72 47
//   History: 
//------------------------------------------------

BitfieldDisablePadding();

string GetTagAsString(uint value)
{
    // Get a string out of it
     local string s = "";
     SPrintf(s, "%c%c%c%c", value >> 24, value >> 16, value >> 8, value);
     return s;
}

typedef struct
{
    int A;
    int B;
    int C;
} Face;

typedef struct
{
    float X;
    float Y;
    float Z;
} Vector3;

typedef struct
{
    float X;
    float Y;
    float Z;
    float W;
} Vector4;

typedef struct
{
    byte StrLen;
    char Str[StrLen];
} _7BitString <comment=Str>;

typedef struct
{
    int StrLen;
    char Str[StrLen];
} String4 <comment=Str, optimize=false>;

typedef enum <int>
{
  DXGI_FORMAT_UNKNOWN = 0,
  DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
  DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
  DXGI_FORMAT_R32G32B32A32_UINT = 3,
  DXGI_FORMAT_R32G32B32A32_SINT = 4,
  DXGI_FORMAT_R32G32B32_TYPELESS = 5,
  DXGI_FORMAT_R32G32B32_FLOAT = 6,
  DXGI_FORMAT_R32G32B32_UINT = 7,
  DXGI_FORMAT_R32G32B32_SINT = 8,
  DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
  DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
  DXGI_FORMAT_R16G16B16A16_UNORM = 11,
  DXGI_FORMAT_R16G16B16A16_UINT = 12,
  DXGI_FORMAT_R16G16B16A16_SNORM = 13,
  DXGI_FORMAT_R16G16B16A16_SINT = 14,
  DXGI_FORMAT_R32G32_TYPELESS = 15,
  DXGI_FORMAT_R32G32_FLOAT = 16,
  DXGI_FORMAT_R32G32_UINT = 17,
  DXGI_FORMAT_R32G32_SINT = 18,
  DXGI_FORMAT_R32G8X24_TYPELESS = 19,
  DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
  DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
  DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
  DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
  DXGI_FORMAT_R10G10B10A2_UNORM = 24,
  DXGI_FORMAT_R10G10B10A2_UINT = 25,
  DXGI_FORMAT_R11G11B10_FLOAT = 26,
  DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
  DXGI_FORMAT_R8G8B8A8_UNORM = 28,
  DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
  DXGI_FORMAT_R8G8B8A8_UINT = 30,
  DXGI_FORMAT_R8G8B8A8_SNORM = 31,
  DXGI_FORMAT_R8G8B8A8_SINT = 32,
  DXGI_FORMAT_R16G16_TYPELESS = 33,
  DXGI_FORMAT_R16G16_FLOAT = 34,
  DXGI_FORMAT_R16G16_UNORM = 35,
  DXGI_FORMAT_R16G16_UINT = 36,
  DXGI_FORMAT_R16G16_SNORM = 37,
  DXGI_FORMAT_R16G16_SINT = 38,
  DXGI_FORMAT_R32_TYPELESS = 39,
  DXGI_FORMAT_D32_FLOAT = 40,
  DXGI_FORMAT_R32_FLOAT = 41,
  DXGI_FORMAT_R32_UINT = 42,
  DXGI_FORMAT_R32_SINT = 43,
  DXGI_FORMAT_R24G8_TYPELESS = 44,
  DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
  DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
  DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
  DXGI_FORMAT_R8G8_TYPELESS = 48,
  DXGI_FORMAT_R8G8_UNORM = 49,
  DXGI_FORMAT_R8G8_UINT = 50,
  DXGI_FORMAT_R8G8_SNORM = 51,
  DXGI_FORMAT_R8G8_SINT = 52,
  DXGI_FORMAT_R16_TYPELESS = 53,
  DXGI_FORMAT_R16_FLOAT = 54,
  DXGI_FORMAT_D16_UNORM = 55,
  DXGI_FORMAT_R16_UNORM = 56,
  DXGI_FORMAT_R16_UINT = 57,
  DXGI_FORMAT_R16_SNORM = 58,
  DXGI_FORMAT_R16_SINT = 59,
  DXGI_FORMAT_R8_TYPELESS = 60,
  DXGI_FORMAT_R8_UNORM = 61,
  DXGI_FORMAT_R8_UINT = 62,
  DXGI_FORMAT_R8_SNORM = 63,
  DXGI_FORMAT_R8_SINT = 64,
  DXGI_FORMAT_A8_UNORM = 65,
  DXGI_FORMAT_R1_UNORM = 66,
  DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
  DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
  DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
  DXGI_FORMAT_BC1_TYPELESS = 70,
  DXGI_FORMAT_BC1_UNORM = 71,
  DXGI_FORMAT_BC1_UNORM_SRGB = 72,
  DXGI_FORMAT_BC2_TYPELESS = 73,
  DXGI_FORMAT_BC2_UNORM = 74,
  DXGI_FORMAT_BC2_UNORM_SRGB = 75,
  DXGI_FORMAT_BC3_TYPELESS = 76,
  DXGI_FORMAT_BC3_UNORM = 77,
  DXGI_FORMAT_BC3_UNORM_SRGB = 78,
  DXGI_FORMAT_BC4_TYPELESS = 79,
  DXGI_FORMAT_BC4_UNORM = 80,
  DXGI_FORMAT_BC4_SNORM = 81,
  DXGI_FORMAT_BC5_TYPELESS = 82,
  DXGI_FORMAT_BC5_UNORM = 83,
  DXGI_FORMAT_BC5_SNORM = 84,
  DXGI_FORMAT_B5G6R5_UNORM = 85,
  DXGI_FORMAT_B5G5R5A1_UNORM = 86,
  DXGI_FORMAT_B8G8R8A8_UNORM = 87,
  DXGI_FORMAT_B8G8R8X8_UNORM = 88,
  DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
  DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
  DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
  DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
  DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
  DXGI_FORMAT_BC6H_TYPELESS = 94,
  DXGI_FORMAT_BC6H_UF16 = 95,
  DXGI_FORMAT_BC6H_SF16 = 96,
  DXGI_FORMAT_BC7_TYPELESS = 97,
  DXGI_FORMAT_BC7_UNORM = 98,
  DXGI_FORMAT_BC7_UNORM_SRGB = 99,
  DXGI_FORMAT_AYUV = 100,
  DXGI_FORMAT_Y410 = 101,
  DXGI_FORMAT_Y416 = 102,
  DXGI_FORMAT_NV12 = 103,
  DXGI_FORMAT_P010 = 104,
  DXGI_FORMAT_P016 = 105,
  DXGI_FORMAT_420_OPAQUE = 106,
  DXGI_FORMAT_YUY2 = 107,
  DXGI_FORMAT_Y210 = 108,
  DXGI_FORMAT_Y216 = 109,
  DXGI_FORMAT_NV11 = 110,
  DXGI_FORMAT_AI44 = 111,
  DXGI_FORMAT_IA44 = 112,
  DXGI_FORMAT_P8 = 113,
  DXGI_FORMAT_A8P8 = 114,
  DXGI_FORMAT_B4G4R4A4_UNORM = 115,
  DXGI_FORMAT_P208 = 130,
  DXGI_FORMAT_V208 = 131,
  DXGI_FORMAT_V408 = 132,
  DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
  DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
  DXGI_FORMAT_FORCE_UINT = 0xffffffff
} DXGI_FORMAT;

// ---------------------------------------------

const uint BundleTag = 0x47727562;

// Textures (swatchbin)
const uint TAG_BLOB_TextureContentBlob = 0x54584342; // "TXCB"

// Models (modelbin)
const uint TAG_BLOB_Skeleton = 0x536B656C; // "Skel"
const uint TAG_BLOB_Morph = 0x4D727068; // "Mrph"
const uint TAG_BLOB_Material = 0x4D617449; // "Matl"
const uint TAG_BLOB_Mesh = 0x4D657368; // "Mesh"
const uint TAG_BLOB_IndexBuffer = 0x496E6442; // "IndB"
const uint TAG_BLOB_VertexLayout = 0x564C6179; // "VLay"
const uint TAG_BLOB_VertexBuffer = 0x56657242; // "VerB"
const uint TAG_BLOB_MorphBuffer = 0x4D427566; // "MBuf"
const uint TAG_BLOB_Skin = 0x536B696E; // "Skin"
const uint TAG_BLOB_Model = 0x4D6F646C; // "Modl"

// Materials (materialbin)
const uint TAG_BLOB_MaterialResource = 0x4D415449; // "MATI"
const uint TAG_BLOB_MaterialShaderParameter = 0x4D545052; // "MTPR"

// Models (modelbin)
const uint TAG_METADATA_Name = 0x4E616D65; // "Name"
const uint TAG_METADATA_TextureContentHeader = 0x54584348; // "TXCH"
const uint TAG_METADATA_Identifier = 0x49642020; // "Id  "
const uint TAG_METADATA_BBox = 0x42426F78; // "BBox"

// Materials (materialbin)
const uint TAG_METADATA_Atlas = 0x41545354; // "ATST"

typedef struct
{
    int Count;
    int TotalSize <format=hex>;
    byte BufferWidth;
    byte Pad;
    short NumElements;
    DXGI_FORMAT Type;
} GraphicsHeader;

struct MetaData;
typedef struct
{
    local int metaDataBasePos = FTell();
    
    uint Tag <format=hex, bgcolor=cBlue>;
    byte Unk : 4;
    short IdLength : 12;
    short OffsetToContents <format=hex>;
    
    FSeek(metaDataBasePos + OffsetToContents);
    switch (Tag)
    {
        case TAG_METADATA_Name:
            char Name[IdLength]; break;
        case TAG_METADATA_Identifier:
            uint Id; break;
        case TAG_METADATA_BBox:
            Vector3 Min;
            Vector3 Max;
            break;
        case TAG_METADATA_Atlas:
            struct
            {
                byte unk[3];
            } Atlas;
            break;
            
        default:
            ;
            break;
            
    }
} MetaData <comment=PrintName>;

string PrintName(MetaData& metaData)
{
     // Get a string out of it
     local string s = GetTagAsString(metaData.Tag);
     if (s == "TXCH")
        return "TXCH - TeXture Content Header";
    else
        return s;
}

struct Bundle;

typedef struct
{
    uint Tag <format=hex, bgcolor=cPurple>;
    byte VersionMajor;
    byte VersionMinor;
    ushort MetaDataCount;
    uint MetaDataOffset <format=hex>;
    uint DataOffset <format=hex>;
    uint DataSize <format=hex>;
    uint UnkSize <format=hex>;
    
    local int j = 0;
    for (j = 0; j < MetaDataCount; j++)
    {
        FSeek(baseBundlePos + MetaDataOffset + j * 0x08);
        MetaData metaData <optimize=false>;
    }
    
    FSeek(baseBundlePos + DataOffset);
    switch (Tag)
    {
        case TAG_BLOB_Skeleton:
            struct
            {
                ushort BoneCount;
                struct
                {
                    String4 Name;
                    short ParentId;
                    short FirstChildIndex;
                    short NextIndex;
                    float Matrix4[0x10];
                } Bone[BoneCount] <optimize=false>;
            } SkeletonBlob;
            break;

        case TAG_BLOB_Morph:
            struct
            {
                short Unk;
                String4 Str;
            } MorphBlob;
            break;
            
        case TAG_BLOB_Material:
            struct
            {
                Bundle bundle;
            } MaterialBlob;
            break;
            
        case TAG_BLOB_MaterialResource:
            struct
            {
                _7BitString Path;
            } MaterialResourceBlob;
            break;
            
        case TAG_BLOB_MaterialShaderParameter:
            struct
            {
                int Unk;
                int Unk2;
                int Unk3;
                int Unk4;
            } MaterialShaderParameterBlob;
            break;
            
        case TAG_BLOB_Mesh:
            // FH3 - 1.08
            // FH4/FH5 - 1.09
            struct
            {
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 9))
                {
                    short UnkV9;
                    short MaterialID;
                    short UnkV9;
                    short UnkV9;
                }
                
                short UnkIndex <bgcolor=cRed>;
                short UnkFlag;   
                byte LODLevel1;
                byte LODLevel2;
                short unk;
                byte unk;
                
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 2))
                {
                    byte UnkV2;
                    byte UnkV2;
                }
                
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 3))
                {
                    byte UnkV3;
                }
                
                byte Unk;
                short Unk;
                
                int Unk;
                int Unk;
                uint FaceStartIndex;
                uint UnkColorMaybe <format=hex>;
                uint FaceCount;
                uint VertexStartIndex;
              
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 6))
                {
                    float UnkV6;
                    uint NumVerts;
                }
                
                
                uint Unk;
                uint UnkEntryCount;
                
                struct
                {
                    int a;
                    int b;
                    int c;
                    int dd;
                } UnkEntry[UnkEntryCount];
                
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 4))
                {
                    int VertexLayoutIndex;
                    int UnkV42;
                }
                
                uint UnkCount2;
                
                if (UnkCount2 > 0)
                    int UnkInts[UnkCount2];
                
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 1))
                {
                    uint UnkV1;
                }
                
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 5))
                {
                    Vector4 unkVecs[5];
                }
                
                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 8))
                {
                    Vector4 unkVec4 <bgcolor=cBlack>;
                    Vector4 unkVec4_2 <bgcolor=cBlack>;
                }
                
                // Rest is padding
            } MeshBlob;
            break;
            
        case TAG_BLOB_IndexBuffer:
            struct
            {
                GraphicsHeader hdr;
                Face faces[hdr.Count / 3];
            } IndexBufferBlob;
            break;
            
        case TAG_BLOB_VertexLayout:
            struct
            {
                short SemanticCount;
                String4 Names[SemanticCount];
                short ElementCount;
                
                struct
                {
                    short m_SemanticNameIndex;
                    short SemanticIndex;
                    int InputSlot;
                    DXGI_FORMAT Format;
                    int AlignedByteOffset <comment="-1 = D3D12_APPEND_ALIGNED_ELEMENT ">;
                    int InstanceDataStepRate;
                } D3D12_INPUT_LAYOUT_DESC[ElementCount] <comment=Format>;
                
                if (VersionMajor >= 1)
                    DXGI_FORMAT PackedFormats[ElementCount];

                if (VersionMajor > 1 || (VersionMajor <= 1 && VersionMinor >= 1))
                    uint BitFlags <format=hex, comment="Bit for each semantic present">;
                    
                // TEXCOORD/TEXCOORD_XONLY: 0x10, 0x08, 0x04, 0x02, 0x01
                // TANGENT: 0x200, 0x100, 0x80, 0x40, 0x20
                // COLOR: 0x400
                    
            } VertexLayoutBlob;
            break;
            
        case TAG_BLOB_VertexBuffer:
            struct
            {
                GraphicsHeader hdr;
                struct
                {
                    byte buffer[hdr.BufferWidth];
                } Vertex[hdr.Count] <optimize=false>;
            } VertexBufferBlob;
            break;
            
        case TAG_BLOB_MorphBuffer:
        case TAG_BLOB_Skin:
            struct
            {
                GraphicsHeader hdr;
                byte buffer[hdr.BufferWidth * hdr.Count];
            } MorphBufferBlob;
            break;
            
        case TAG_BLOB_Model:
            struct
            {
                short MeshCount;
                short BuffersCount <comment="Combined buffers">;
                short VertexLayoutCount;
                short MaterialCount;
                short unk;
                short unk2;
                short unk3;
                short unk4;
            } ModelBlob;
            break;
    }
} Blob <optimize=false, comment=PrintBlob>;

string PrintBlob(Blob& blob)
{
     // Get a string out of it
     local string s = GetTagAsString(blob.Tag);
     
     local string ret = "";
     switch (s)
     {
        case "TXCB":
           ret = "TXCB - TeXture Content Blob";
           break;
           
        case "MatI":
            SPrintf(ret, "Matl - Material [ID: %d] (Name: %s)", blob.metaData[1].Id, 
                blob.metaData[0].IdLength > 0 ? blob.metaData[0].Name : "<none>");
            break;
            
        case "Mesh":
            SPrintf(ret, "Mesh (Name: %s)", blob.metaData[0].IdLength > 0 ? blob.metaData[0].Name : "<none>");
            break;
            
        case "VLay":
            SPrintf(ret, "VLay - Vertex Layout [ID: %d]", blob.metaData[0].Id);
            break;
            
        case "IndB":
            SPrintf(ret, "IndB - Index Buffer [ID: %d] (Count: %d)", blob.metaData[0].Id, blob.IndexBufferBlob.hdr.Count);
            break;
            
        case "VerB":
            SPrintf(ret, "VerB - Vertex Buffer [ID: %d] (Count: %d)", blob.metaData[0].Id, blob.VertexBufferBlob.hdr.Count);
            break;
            
        case "MBuf":
            SPrintf(ret, "MBuf - Morph Buffer [ID: %d] (Count: %d)", blob.metaData[0].Id, blob.MorphBufferBlob.hdr.Count);
            break;
            
        default:
            ret = s;
            break;
     }
     
     return ret;
}

typedef struct
{
    local int baseBundlePos = FTell();
    
    struct FileHeaderV1
    {
        uint m_Tag <format=hex>;
        byte m_VersionMajor;
        byte m_VersionMinor;
        
        if (m_VersionMinor >= 1)
        {
            short __pad__;
            uint m_HeaderSize <format=hex>;
            uint m_TotalSize <format=hex>;
            int m_BlobCount;
        }
        else
        {
            short m_BlobCount;
            FSkip(0x08);
        }
    } m_Header <bgcolor=cGreen>;
    
    local int i = 0;
    local int basePos = FTell();
    for (i = 0; i < m_Header.m_BlobCount; i++)
    {
        FSeek(basePos + i * 0x18);
        Blob blob;
    }
} Bundle;

Bundle bundle;

